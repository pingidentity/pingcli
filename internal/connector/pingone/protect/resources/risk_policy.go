// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package resources

import (
	"fmt"

	"github.com/patrickcping/pingone-go-sdk-v2/risk"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone"
	"github.com/pingidentity/pingcli/internal/logger"
)

// Verify that the resource satisfies the exportable resource interface
var (
	_ connector.ExportableResource = &PingOneRiskPolicyResource{}
)

type PingOneRiskPolicyResource struct {
	clientInfo *connector.ClientInfo
}

// Utility method for creating a PingOneRiskPolicyResource
func RiskPolicy(clientInfo *connector.ClientInfo) *PingOneRiskPolicyResource {
	return &PingOneRiskPolicyResource{
		clientInfo: clientInfo,
	}
}

func (r *PingOneRiskPolicyResource) ResourceType() string {
	return "pingone_risk_policy"
}

func (r *PingOneRiskPolicyResource) ExportAll() (*[]connector.ImportBlock, error) {
	l := logger.Get()
	l.Debug().Msgf("Exporting all '%s' Resources...", r.ResourceType())

	importBlocks := []connector.ImportBlock{}

	riskPolicyData, err := r.getRiskPolicyData()
	if err != nil {
		return nil, err
	}

	for riskPolicyId, riskPolicyName := range riskPolicyData {
		commentData := map[string]string{
			"Risk Policy ID":        riskPolicyId,
			"Risk Policy Name":      riskPolicyName,
			"Export Environment ID": r.clientInfo.PingOneExportEnvironmentID,
			"Resource Type":         r.ResourceType(),
		}

		importBlock := connector.ImportBlock{
			ResourceType:       r.ResourceType(),
			ResourceName:       riskPolicyName,
			ResourceID:         fmt.Sprintf("%s/%s", r.clientInfo.PingOneExportEnvironmentID, riskPolicyId),
			CommentInformation: common.GenerateCommentInformation(commentData),
		}

		importBlocks = append(importBlocks, importBlock)
	}

	return &importBlocks, nil
}

func (r *PingOneRiskPolicyResource) getRiskPolicyData() (map[string]string, error) {
	riskPolicyData := make(map[string]string)

	iter := r.clientInfo.PingOneApiClient.RiskAPIClient.RiskPoliciesApi.ReadRiskPolicySets(r.clientInfo.PingOneContext, r.clientInfo.PingOneExportEnvironmentID).Execute()
	apiObjs, err := pingone.GetRiskAPIObjectsFromIterator[risk.RiskPolicySet](iter, "ReadRiskPolicySets", "GetRiskPolicySets", r.ResourceType())
	if err != nil {
		return nil, err
	}

	for _, riskPolicy := range apiObjs {
		riskPolicyId, riskPolicyIdOk := riskPolicy.GetIdOk()
		riskPolicyName, riskPolicyNameOk := riskPolicy.GetNameOk()

		if riskPolicyIdOk && riskPolicyNameOk {
			riskPolicyData[*riskPolicyId] = *riskPolicyName
		}
	}

	return riskPolicyData, nil
}
