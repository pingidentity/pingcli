// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package resources

import (
	"fmt"

	"github.com/patrickcping/pingone-go-sdk-v2/risk"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone"
	"github.com/pingidentity/pingcli/internal/logger"
)

// Verify that the resource satisfies the exportable resource interface
var (
	_ connector.ExportableResource = &PingOneRiskPredictorResource{}
)

type PingOneRiskPredictorResource struct {
	clientInfo *connector.ClientInfo
}

// Utility method for creating a PingOneRiskPredictorResource
func RiskPredictor(clientInfo *connector.ClientInfo) *PingOneRiskPredictorResource {
	return &PingOneRiskPredictorResource{
		clientInfo: clientInfo,
	}
}

func (r *PingOneRiskPredictorResource) ResourceType() string {
	return "pingone_risk_predictor"
}

func (r *PingOneRiskPredictorResource) ExportAll() (*[]connector.ImportBlock, error) {
	l := logger.Get()
	l.Debug().Msgf("Exporting all '%s' Resources...", r.ResourceType())

	importBlocks := []connector.ImportBlock{}

	riskPredictorData, err := r.getRiskPredictorData()
	if err != nil {
		return nil, err
	}

	for riskPredictorId, riskPredictorInfo := range riskPredictorData {
		riskPredictorName := riskPredictorInfo[0]
		riskPredictorType := riskPredictorInfo[1]

		commentData := map[string]string{
			"Risk Predictor ID":     riskPredictorId,
			"Risk Predictor Name":   riskPredictorName,
			"Risk Predictor Type":   riskPredictorType,
			"Export Environment ID": r.clientInfo.PingOneExportEnvironmentID,
			"Resource Type":         r.ResourceType(),
		}

		importBlock := connector.ImportBlock{
			ResourceType:       r.ResourceType(),
			ResourceName:       fmt.Sprintf("%s_%s", riskPredictorType, riskPredictorName),
			ResourceID:         fmt.Sprintf("%s/%s", r.clientInfo.PingOneExportEnvironmentID, riskPredictorId),
			CommentInformation: common.GenerateCommentInformation(commentData),
		}

		importBlocks = append(importBlocks, importBlock)
	}

	return &importBlocks, nil
}

func (r *PingOneRiskPredictorResource) getRiskPredictorData() (map[string][]string, error) {
	riskPredictorData := make(map[string][]string)

	iter := r.clientInfo.PingOneApiClient.RiskAPIClient.RiskAdvancedPredictorsApi.ReadAllRiskPredictors(r.clientInfo.PingOneContext, r.clientInfo.PingOneExportEnvironmentID).Execute()
	apiObjs, err := pingone.GetRiskAPIObjectsFromIterator[risk.RiskPredictor](iter, "ReadAllRiskPredictors", "GetRiskPredictors", r.ResourceType())
	if err != nil {
		return nil, err
	}

	for _, inner := range apiObjs {
		var (
			riskPredictorId     *string
			riskPredictorIdOk   bool
			riskPredictorName   *string
			riskPredictorNameOk bool
			riskPredictorType   *risk.EnumPredictorType
			riskPredictorTypeOk bool
		)

		switch {
		case inner.RiskPredictorAdversaryInTheMiddle != nil:
			riskPredictorId, riskPredictorIdOk = inner.RiskPredictorAdversaryInTheMiddle.GetIdOk()
			riskPredictorName, riskPredictorNameOk = inner.RiskPredictorAdversaryInTheMiddle.GetNameOk()
			riskPredictorType, riskPredictorTypeOk = inner.RiskPredictorAdversaryInTheMiddle.GetTypeOk()
		case inner.RiskPredictorAnonymousNetwork != nil:
			riskPredictorId, riskPredictorIdOk = inner.RiskPredictorAnonymousNetwork.GetIdOk()
			riskPredictorName, riskPredictorNameOk = inner.RiskPredictorAnonymousNetwork.GetNameOk()
			riskPredictorType, riskPredictorTypeOk = inner.RiskPredictorAnonymousNetwork.GetTypeOk()
		case inner.RiskPredictorBotDetection != nil:
			riskPredictorId, riskPredictorIdOk = inner.RiskPredictorBotDetection.GetIdOk()
			riskPredictorName, riskPredictorNameOk = inner.RiskPredictorBotDetection.GetNameOk()
			riskPredictorType, riskPredictorTypeOk = inner.RiskPredictorBotDetection.GetTypeOk()
		case inner.RiskPredictorCommon != nil:
			riskPredictorId, riskPredictorIdOk = inner.RiskPredictorCommon.GetIdOk()
			riskPredictorName, riskPredictorNameOk = inner.RiskPredictorCommon.GetNameOk()
			riskPredictorType, riskPredictorTypeOk = inner.RiskPredictorCommon.GetTypeOk()
		case inner.RiskPredictorComposite != nil:
			riskPredictorId, riskPredictorIdOk = inner.RiskPredictorComposite.GetIdOk()
			riskPredictorName, riskPredictorNameOk = inner.RiskPredictorComposite.GetNameOk()
			riskPredictorType, riskPredictorTypeOk = inner.RiskPredictorComposite.GetTypeOk()
		case inner.RiskPredictorCustom != nil:
			riskPredictorId, riskPredictorIdOk = inner.RiskPredictorCustom.GetIdOk()
			riskPredictorName, riskPredictorNameOk = inner.RiskPredictorCustom.GetNameOk()
			riskPredictorType, riskPredictorTypeOk = inner.RiskPredictorCustom.GetTypeOk()
		case inner.RiskPredictorDevice != nil:
			riskPredictorId, riskPredictorIdOk = inner.RiskPredictorDevice.GetIdOk()
			riskPredictorName, riskPredictorNameOk = inner.RiskPredictorDevice.GetNameOk()
			riskPredictorType, riskPredictorTypeOk = inner.RiskPredictorDevice.GetTypeOk()
		case inner.RiskPredictorEmailReputation != nil:
			riskPredictorId, riskPredictorIdOk = inner.RiskPredictorEmailReputation.GetIdOk()
			riskPredictorName, riskPredictorNameOk = inner.RiskPredictorEmailReputation.GetNameOk()
			riskPredictorType, riskPredictorTypeOk = inner.RiskPredictorEmailReputation.GetTypeOk()
		case inner.RiskPredictorGeovelocity != nil:
			riskPredictorId, riskPredictorIdOk = inner.RiskPredictorGeovelocity.GetIdOk()
			riskPredictorName, riskPredictorNameOk = inner.RiskPredictorGeovelocity.GetNameOk()
			riskPredictorType, riskPredictorTypeOk = inner.RiskPredictorGeovelocity.GetTypeOk()
		case inner.RiskPredictorIPReputation != nil:
			riskPredictorId, riskPredictorIdOk = inner.RiskPredictorIPReputation.GetIdOk()
			riskPredictorName, riskPredictorNameOk = inner.RiskPredictorIPReputation.GetNameOk()
			riskPredictorType, riskPredictorTypeOk = inner.RiskPredictorIPReputation.GetTypeOk()
		case inner.RiskPredictorUserLocationAnomaly != nil:
			riskPredictorId, riskPredictorIdOk = inner.RiskPredictorUserLocationAnomaly.GetIdOk()
			riskPredictorName, riskPredictorNameOk = inner.RiskPredictorUserLocationAnomaly.GetNameOk()
			riskPredictorType, riskPredictorTypeOk = inner.RiskPredictorUserLocationAnomaly.GetTypeOk()
		case inner.RiskPredictorUserRiskBehavior != nil:
			riskPredictorId, riskPredictorIdOk = inner.RiskPredictorUserRiskBehavior.GetIdOk()
			riskPredictorName, riskPredictorNameOk = inner.RiskPredictorUserRiskBehavior.GetNameOk()
			riskPredictorType, riskPredictorTypeOk = inner.RiskPredictorUserRiskBehavior.GetTypeOk()
		case inner.RiskPredictorVelocity != nil:
			riskPredictorId, riskPredictorIdOk = inner.RiskPredictorVelocity.GetIdOk()
			riskPredictorName, riskPredictorNameOk = inner.RiskPredictorVelocity.GetNameOk()
			riskPredictorType, riskPredictorTypeOk = inner.RiskPredictorVelocity.GetTypeOk()
		default:
			continue
		}

		if riskPredictorIdOk && riskPredictorNameOk && riskPredictorTypeOk {
			riskPredictorData[*riskPredictorId] = []string{*riskPredictorName, string(*riskPredictorType)}
		}
	}

	return riskPredictorData, nil
}
