// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package resources

import (
	"fmt"

	"github.com/patrickcping/pingone-go-sdk-v2/management"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone"
	"github.com/pingidentity/pingcli/internal/logger"
)

// Verify that the resource satisfies the exportable resource interface
var (
	_ connector.ExportableResource = &PingOneApplicationRoleAssignmentResource{}
)

type PingOneApplicationRoleAssignmentResource struct {
	clientInfo *connector.ClientInfo
}

// Utility method for creating a PingOneApplicationRoleAssignmentResource
func ApplicationRoleAssignment(clientInfo *connector.ClientInfo) *PingOneApplicationRoleAssignmentResource {
	return &PingOneApplicationRoleAssignmentResource{
		clientInfo: clientInfo,
	}
}

func (r *PingOneApplicationRoleAssignmentResource) ResourceType() string {
	return "pingone_application_role_assignment"
}

func (r *PingOneApplicationRoleAssignmentResource) ExportAll() (*[]connector.ImportBlock, error) {
	l := logger.Get()
	l.Debug().Msgf("Exporting all '%s' Resources...", r.ResourceType())

	importBlocks := []connector.ImportBlock{}

	applicationData, err := r.getApplicationData()
	if err != nil {
		return nil, err
	}

	for applicationId, applicationName := range applicationData {
		applicationRoleAssignmentData, err := r.getApplicationRoleAssignmentData(applicationId)
		if err != nil {
			return nil, err
		}

		for applicationRoleAssignmentId, applicationRoleAssignmentRoleId := range applicationRoleAssignmentData {
			applicationRoleAssignmentRoleName, applicationRoleAssignmentRoleNameOk, err := r.getRoleName(applicationRoleAssignmentRoleId)
			if err != nil {
				return nil, err
			}

			if !applicationRoleAssignmentRoleNameOk {
				continue
			}

			commentData := map[string]string{
				"Application ID":                        applicationId,
				"Application Name":                      applicationName,
				"Application Role Assignment ID":        applicationRoleAssignmentId,
				"Application Role Assignment Role Name": applicationRoleAssignmentRoleId,
				"Export Environment ID":                 r.clientInfo.PingOneExportEnvironmentID,
				"Resource Type":                         r.ResourceType(),
			}

			importBlock := connector.ImportBlock{
				ResourceType:       r.ResourceType(),
				ResourceName:       fmt.Sprintf("%s_%s_%s", applicationName, string(applicationRoleAssignmentRoleName), applicationRoleAssignmentId),
				ResourceID:         fmt.Sprintf("%s/%s/%s", r.clientInfo.PingOneExportEnvironmentID, applicationId, applicationRoleAssignmentId),
				CommentInformation: common.GenerateCommentInformation(commentData),
			}

			importBlocks = append(importBlocks, importBlock)
		}
	}

	return &importBlocks, nil
}

func (r *PingOneApplicationRoleAssignmentResource) getApplicationData() (map[string]string, error) {
	applicationData := make(map[string]string)

	iter := r.clientInfo.PingOneApiClient.ManagementAPIClient.ApplicationsApi.ReadAllApplications(r.clientInfo.PingOneContext, r.clientInfo.PingOneExportEnvironmentID).Execute()
	apiObjs, err := pingone.GetManagementAPIObjectsFromIterator[management.ReadOneApplication200Response](iter, "ReadAllApplications", "GetApplications", r.ResourceType())
	if err != nil {
		return nil, err
	}

	for _, inner := range apiObjs {
		var (
			applicationId                  *string
			applicationIdOk                bool
			applicationName                *string
			applicationNameOk              bool
			applicationAccessControlRole   *management.ApplicationAccessControlRole
			applicationAccessControlRoleOk bool
		)

		switch {
		case inner.ApplicationOIDC != nil:
			applicationId, applicationIdOk = inner.ApplicationOIDC.GetIdOk()
			applicationName, applicationNameOk = inner.ApplicationOIDC.GetNameOk()
			if inner.ApplicationOIDC.AccessControl != nil {
				applicationAccessControlRole, applicationAccessControlRoleOk = inner.ApplicationOIDC.AccessControl.GetRoleOk()
			}
		case inner.ApplicationSAML != nil:
			applicationId, applicationIdOk = inner.ApplicationSAML.GetIdOk()
			applicationName, applicationNameOk = inner.ApplicationSAML.GetNameOk()
			if inner.ApplicationSAML.AccessControl != nil {
				applicationAccessControlRole, applicationAccessControlRoleOk = inner.ApplicationSAML.AccessControl.GetRoleOk()
			}
		case inner.ApplicationExternalLink != nil:
			applicationId, applicationIdOk = inner.ApplicationExternalLink.GetIdOk()
			applicationName, applicationNameOk = inner.ApplicationExternalLink.GetNameOk()
			if inner.ApplicationExternalLink.AccessControl != nil {
				applicationAccessControlRole, applicationAccessControlRoleOk = inner.ApplicationExternalLink.AccessControl.GetRoleOk()
			}
		default:
			continue
		}

		if applicationIdOk && applicationNameOk && applicationAccessControlRoleOk {
			if applicationAccessControlRole.GetType() != management.ENUMAPPLICATIONACCESSCONTROLTYPE_ADMIN_USERS_ONLY {
				continue
			}

			applicationData[*applicationId] = *applicationName
		}
	}

	return applicationData, nil
}

func (r *PingOneApplicationRoleAssignmentResource) getApplicationRoleAssignmentData(applicationId string) (map[string]string, error) {
	applicationRoleAssignmentData := make(map[string]string)

	iter := r.clientInfo.PingOneApiClient.ManagementAPIClient.ApplicationRoleAssignmentsApi.ReadApplicationRoleAssignments(r.clientInfo.PingOneContext, r.clientInfo.PingOneExportEnvironmentID, applicationId).Execute()
	apiObjs, err := pingone.GetManagementAPIObjectsFromIterator[management.RoleAssignment](iter, "ReadApplicationRoleAssignments", "GetRoleAssignments", r.ResourceType())
	if err != nil {
		return nil, err
	}

	for _, applicationRoleAssignment := range apiObjs {
		applicationRoleAssignmentId, applicationRoleAssignmentIdOk := applicationRoleAssignment.GetIdOk()
		applicationRoleAssignmentRole, applicationRoleAssignmentRoleOk := applicationRoleAssignment.GetRoleOk()

		if applicationRoleAssignmentIdOk && applicationRoleAssignmentRoleOk {
			applicationRoleAssignmentRoleId, applicationRoleAssignmentRoleIdOk := applicationRoleAssignmentRole.GetIdOk()

			if applicationRoleAssignmentRoleIdOk {
				applicationRoleAssignmentData[*applicationRoleAssignmentId] = *applicationRoleAssignmentRoleId
			}
		}
	}

	return applicationRoleAssignmentData, nil
}

func (r *PingOneApplicationRoleAssignmentResource) getRoleName(roleId string) (management.EnumRoleName, bool, error) {
	apiRole, resp, err := r.clientInfo.PingOneApiClient.ManagementAPIClient.RolesApi.ReadOneRole(r.clientInfo.PingOneContext, roleId).Execute()
	ok, err := common.HandleClientResponse(resp, err, "ReadOneRole", r.ResourceType())
	if err != nil {
		return "", false, err
	}
	if !ok {
		return "", false, nil
	}

	if apiRole != nil {
		apiRoleName, apiRoleNameOk := apiRole.GetNameOk()
		if apiRoleNameOk {
			return *apiRoleName, true, nil
		}
	}

	return "", false, fmt.Errorf("unable to get role name for role ID: %s", roleId)
}
