// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package resources

import (
	"fmt"

	"github.com/patrickcping/pingone-go-sdk-v2/management"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone"
	"github.com/pingidentity/pingcli/internal/logger"
)

// Verify that the resource satisfies the exportable resource interface
var (
	_ connector.ExportableResource = &PingOneIdentityProviderAttributeResource{}
)

type PingOneIdentityProviderAttributeResource struct {
	clientInfo *connector.ClientInfo
}

// Utility method for creating a PingOneIdentityProviderAttributeResource
func IdentityProviderAttribute(clientInfo *connector.ClientInfo) *PingOneIdentityProviderAttributeResource {
	return &PingOneIdentityProviderAttributeResource{
		clientInfo: clientInfo,
	}
}

func (r *PingOneIdentityProviderAttributeResource) ResourceType() string {
	return "pingone_identity_provider_attribute"
}

func (r *PingOneIdentityProviderAttributeResource) ExportAll() (*[]connector.ImportBlock, error) {
	l := logger.Get()
	l.Debug().Msgf("Exporting all '%s' Resources...", r.ResourceType())

	importBlocks := []connector.ImportBlock{}

	providerData, err := r.getProviderData()
	if err != nil {
		return nil, err
	}

	for providerId, providerName := range providerData {
		identityProviderAttributeData, err := r.getIdentityProviderAttributeData(providerId)
		if err != nil {
			return nil, err
		}

		for identityProviderAttributeId, identityProviderAttributeName := range identityProviderAttributeData {
			commentData := map[string]string{
				"Identity Provider ID":             providerId,
				"Identity Provider Name":           providerName,
				"Identity Provider Attribute ID":   identityProviderAttributeId,
				"Identity Provider Attribute Name": identityProviderAttributeName,
				"Export Environment ID":            r.clientInfo.PingOneExportEnvironmentID,
				"Resource Type":                    r.ResourceType(),
			}

			importBlock := connector.ImportBlock{
				ResourceType:       r.ResourceType(),
				ResourceName:       fmt.Sprintf("%s_%s", providerName, identityProviderAttributeName),
				ResourceID:         fmt.Sprintf("%s/%s/%s", r.clientInfo.PingOneExportEnvironmentID, providerId, identityProviderAttributeId),
				CommentInformation: common.GenerateCommentInformation(commentData),
			}

			importBlocks = append(importBlocks, importBlock)
		}
	}

	return &importBlocks, nil
}

func (r *PingOneIdentityProviderAttributeResource) getProviderData() (map[string]string, error) {
	providerData := make(map[string]string)

	iter := r.clientInfo.PingOneApiClient.ManagementAPIClient.IdentityProvidersApi.ReadAllIdentityProviders(r.clientInfo.PingOneContext, r.clientInfo.PingOneExportEnvironmentID).Execute()
	apiObjs, err := pingone.GetManagementAPIObjectsFromIterator[management.IdentityProvider](iter, "ReadAllIdentityProviders", "GetIdentityProviders", r.ResourceType())
	if err != nil {
		return nil, err
	}

	for _, innerObj := range apiObjs {
		var (
			providerId     *string
			providerIdOk   bool
			providerName   *string
			providerNameOk bool
		)

		switch {
		case innerObj.IdentityProviderApple != nil:
			providerId, providerIdOk = innerObj.IdentityProviderApple.GetIdOk()
			providerName, providerNameOk = innerObj.IdentityProviderApple.GetNameOk()
		case innerObj.IdentityProviderClientIDClientSecret != nil:
			providerId, providerIdOk = innerObj.IdentityProviderClientIDClientSecret.GetIdOk()
			providerName, providerNameOk = innerObj.IdentityProviderClientIDClientSecret.GetNameOk()
		case innerObj.IdentityProviderFacebook != nil:
			providerId, providerIdOk = innerObj.IdentityProviderFacebook.GetIdOk()
			providerName, providerNameOk = innerObj.IdentityProviderFacebook.GetNameOk()
		case innerObj.IdentityProviderOIDC != nil:
			providerId, providerIdOk = innerObj.IdentityProviderOIDC.GetIdOk()
			providerName, providerNameOk = innerObj.IdentityProviderOIDC.GetNameOk()
		case innerObj.IdentityProviderPaypal != nil:
			providerId, providerIdOk = innerObj.IdentityProviderPaypal.GetIdOk()
			providerName, providerNameOk = innerObj.IdentityProviderPaypal.GetNameOk()
		case innerObj.IdentityProviderSAML != nil:
			providerId, providerIdOk = innerObj.IdentityProviderSAML.GetIdOk()
			providerName, providerNameOk = innerObj.IdentityProviderSAML.GetNameOk()
		default:
			continue
		}

		if providerIdOk && providerNameOk {
			providerData[*providerId] = *providerName
		}
	}

	return providerData, nil
}

func (r *PingOneIdentityProviderAttributeResource) getIdentityProviderAttributeData(providerId string) (map[string]string, error) {
	identityProviderAttributeData := make(map[string]string)

	iter := r.clientInfo.PingOneApiClient.ManagementAPIClient.IdentityProviderAttributesApi.ReadAllIdentityProviderAttributes(r.clientInfo.PingOneContext, r.clientInfo.PingOneExportEnvironmentID, providerId).Execute()
	apiObjs, err := pingone.GetManagementAPIObjectsFromIterator[management.EntityArrayEmbeddedAttributesInner](iter, "ReadAllIdentityProviderAttributes", "GetAttributes", r.ResourceType())
	if err != nil {
		return nil, err
	}

	for _, innerObj := range apiObjs {
		if innerObj.IdentityProviderAttribute != nil {
			identityProviderAttributeId, identityProviderAttributeIdOk := innerObj.IdentityProviderAttribute.GetIdOk()
			identityProviderAttributeName, identityProviderAttributeNameOk := innerObj.IdentityProviderAttribute.GetNameOk()

			if identityProviderAttributeIdOk && identityProviderAttributeNameOk {
				identityProviderAttributeData[*identityProviderAttributeId] = *identityProviderAttributeName
			}
		}
	}

	return identityProviderAttributeData, nil
}
