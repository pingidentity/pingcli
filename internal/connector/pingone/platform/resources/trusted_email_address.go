// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package resources

import (
	"fmt"

	"github.com/patrickcping/pingone-go-sdk-v2/management"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone"
	"github.com/pingidentity/pingcli/internal/logger"
)

// Verify that the resource satisfies the exportable resource interface
var (
	_ connector.ExportableResource = &PingOneTrustedEmailAddressResource{}
)

type PingOneTrustedEmailAddressResource struct {
	clientInfo *connector.ClientInfo
}

// Utility method for creating a PingOneTrustedEmailAddressResource
func TrustedEmailAddress(clientInfo *connector.ClientInfo) *PingOneTrustedEmailAddressResource {
	return &PingOneTrustedEmailAddressResource{
		clientInfo: clientInfo,
	}
}

func (r *PingOneTrustedEmailAddressResource) ResourceType() string {
	return "pingone_trusted_email_address"
}

func (r *PingOneTrustedEmailAddressResource) ExportAll() (*[]connector.ImportBlock, error) {
	l := logger.Get()
	l.Debug().Msgf("Exporting all '%s' Resources...", r.ResourceType())

	importBlocks := []connector.ImportBlock{}

	trustedEmailAddressData, err := r.getTrustedEmailAddressData()
	if err != nil {
		return nil, err
	}

	for trustedEmailAddressId, trustedEmailAddressName := range trustedEmailAddressData {
		commentData := map[string]string{
			"Trusted Email Address ID":   trustedEmailAddressId,
			"Trusted Email Address Name": trustedEmailAddressName,
			"Export Environment ID":      r.clientInfo.PingOneExportEnvironmentID,
			"Resource Type":              r.ResourceType(),
		}

		importBlock := connector.ImportBlock{
			ResourceType:       r.ResourceType(),
			ResourceName:       trustedEmailAddressName,
			ResourceID:         fmt.Sprintf("%s/%s", r.clientInfo.PingOneExportEnvironmentID, trustedEmailAddressId),
			CommentInformation: common.GenerateCommentInformation(commentData),
		}

		importBlocks = append(importBlocks, importBlock)
	}

	return &importBlocks, nil
}

func (r *PingOneTrustedEmailAddressResource) getEmailDomainData() (map[string]string, error) {
	//TODO
}

func (r *PingOneTrustedEmailAddressResource) getTrustedEmailAddressData() (map[string]string, error) {
	trustedEmailAddressData := make(map[string]string)

	iter := r.clientInfo.PingOneApiClient.ManagementAPIClient.TrustedEmailAddressesApi.ReadAllTrustedEmailAddresses(r.clientInfo.PingOneContext, r.clientInfo.PingOneExportEnvironmentID).Execute()
	apiObjs, err := pingone.GetManagementAPIObjectsFromIterator[management.EmailDomainTrustedEmail](iter, "ReadAllTrustedEmailAddresses", "GetTrustedEmails", r.ResourceType())
	if err != nil {
		return nil, err
	}

	for _, trustedEmailAddress := range apiObjs {
		trustedEmailAddressId, trustedEmailAddressIdOk := trustedEmailAddress.GetIdOk()
		trustedEmailAddressName, trustedEmailAddressNameOk := trustedEmailAddress.GetNameOk()

		if trustedEmailAddressIdOk && trustedEmailAddressNameOk {
			trustedEmailAddressData[*trustedEmailAddressId] = *trustedEmailAddressName
		}
	}

	return trustedEmailAddressData, nil
}
