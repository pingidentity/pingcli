// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package resources

import (
	"fmt"

	"github.com/patrickcping/pingone-go-sdk-v2/management"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone"
	"github.com/pingidentity/pingcli/internal/errs"
	"github.com/pingidentity/pingcli/internal/logger"
)

// Verify that the resource satisfies the exportable resource interface
var (
	_                                      connector.ExportableResource = &PingOneGatewayRoleAssignmentResource{}
	gatewayRoleAssignmentExportErrorPrefix                              = "pingone_gateway_role_assignment resource export error"
)

type PingOneGatewayRoleAssignmentResource struct {
	clientInfo *connector.ClientInfo
}

// Utility method for creating a PingOneGatewayRoleAssignmentResource
func GatewayRoleAssignment(clientInfo *connector.ClientInfo) *PingOneGatewayRoleAssignmentResource {
	return &PingOneGatewayRoleAssignmentResource{
		clientInfo: clientInfo,
	}
}

func (r *PingOneGatewayRoleAssignmentResource) ResourceType() string {
	return "pingone_gateway_role_assignment"
}

func (r *PingOneGatewayRoleAssignmentResource) ExportAll() (*[]connector.ImportBlock, error) {
	l := logger.Get()
	l.Debug().Msgf("Exporting all '%s' Resources...", r.ResourceType())

	importBlocks := []connector.ImportBlock{}

	gatewayData, err := r.getGatewayData()
	if err != nil {
		return nil, err
	}

	for gatewayId, gatewayName := range gatewayData {
		gatewayRoleAssignmentData, err := r.getGatewayRoleAssignmentData(gatewayId)
		if err != nil {
			return nil, err
		}

		for gatewayRoleAssignmentId, gatewayRoleId := range gatewayRoleAssignmentData {
			gatewayRoleName, gatewayRoleNameOk, err := r.getRoleAssignmentRoleName(gatewayRoleId)
			if err != nil {
				return nil, err
			}
			if gatewayRoleName == nil {
				continue
			}
			if !gatewayRoleNameOk {
				continue
			}

			commentData := map[string]string{
				"Gateway ID":                        gatewayId,
				"Gateway Name":                      gatewayName,
				"Gateway Role Assignment ID":        gatewayRoleAssignmentId,
				"Gateway Role Assignment Role Name": string(*gatewayRoleName),
				"Export Environment ID":             r.clientInfo.PingOneExportEnvironmentID,
				"Resource Type":                     r.ResourceType(),
			}

			importBlock := connector.ImportBlock{
				ResourceType:       r.ResourceType(),
				ResourceName:       fmt.Sprintf("%s_%s_%s", gatewayName, string(*gatewayRoleName), gatewayRoleAssignmentId),
				ResourceID:         fmt.Sprintf("%s/%s/%s", r.clientInfo.PingOneExportEnvironmentID, gatewayId, gatewayRoleAssignmentId),
				CommentInformation: common.GenerateCommentInformation(commentData),
			}

			importBlocks = append(importBlocks, importBlock)
		}
	}

	return &importBlocks, nil
}

func (r *PingOneGatewayRoleAssignmentResource) getGatewayData() (map[string]string, error) {
	gatewayData := make(map[string]string)

	iter := r.clientInfo.PingOneApiClient.ManagementAPIClient.GatewaysApi.ReadAllGateways(r.clientInfo.PingOneContext, r.clientInfo.PingOneExportEnvironmentID).Execute()
	apiObjs, err := pingone.GetManagementAPIObjectsFromIterator[management.EntityArrayEmbeddedGatewaysInner](iter, "ReadAllGateways", "GetGateways", r.ResourceType())
	if err != nil {
		return nil, err
	}

	for _, innerObj := range apiObjs {
		// Only PingFederate Connections have role assignments
		if innerObj.Gateway != nil {
			gatewayType, gatewayTypeOk := innerObj.Gateway.GetTypeOk()

			if gatewayTypeOk && *gatewayType == management.ENUMGATEWAYTYPE_PING_FEDERATE {
				gatewayId, gatewayIdOk := innerObj.Gateway.GetIdOk()
				gatewayName, gatewayNameOk := innerObj.Gateway.GetNameOk()

				if gatewayIdOk && gatewayNameOk {
					gatewayData[*gatewayId] = *gatewayName
				}
			}
		}
	}

	return gatewayData, nil
}

func (r *PingOneGatewayRoleAssignmentResource) getGatewayRoleAssignmentData(gatewayId string) (map[string]string, error) {
	gatewayRoleAssignmentData := make(map[string]string)

	iter := r.clientInfo.PingOneApiClient.ManagementAPIClient.GatewayRoleAssignmentsApi.ReadGatewayRoleAssignments(r.clientInfo.PingOneContext, r.clientInfo.PingOneExportEnvironmentID, gatewayId).Execute()
	apiObjs, err := pingone.GetManagementAPIObjectsFromIterator[management.RoleAssignment](iter, "ReadGatewayRoleAssignments", "GetRoleAssignments", r.ResourceType())
	if err != nil {
		return nil, err
	}

	for _, gatewayRoleAssignment := range apiObjs {
		gatewayRoleAssignmentId, gatewayRoleAssignmentIdOk := gatewayRoleAssignment.GetIdOk()
		gatewayRoleAssignmentRole, gatewayRoleAssignmentRoleOk := gatewayRoleAssignment.GetRoleOk()

		if gatewayRoleAssignmentIdOk && gatewayRoleAssignmentRoleOk {
			gatewayRoleAssignmentRoleId, gatewayRoleAssignmentRoleIdOk := gatewayRoleAssignmentRole.GetIdOk()

			if gatewayRoleAssignmentRoleIdOk {
				gatewayRoleAssignmentData[*gatewayRoleAssignmentId] = *gatewayRoleAssignmentRoleId
			}
		}
	}

	return gatewayRoleAssignmentData, nil
}

func (r *PingOneGatewayRoleAssignmentResource) getRoleAssignmentRoleName(roleId string) (*management.EnumRoleName, bool, error) {
	role, resp, err := r.clientInfo.PingOneApiClient.ManagementAPIClient.RolesApi.ReadOneRole(r.clientInfo.PingOneContext, roleId).Execute()
	ok, err := common.CheckSingletonResource(resp, err, "ReadOneRole", r.ResourceType())
	if err != nil {
		return nil, false, err
	}
	if !ok {
		return nil, false, nil
	}

	if role != nil {
		roleName, roleNameOk := role.GetNameOk()
		if roleNameOk {
			return roleName, true, nil
		}
	}

	return nil, false, &errs.PingCLIError{Prefix: gatewayRoleAssignmentExportErrorPrefix, Err: fmt.Errorf("%w: %q", ErrRoleNameNotFound, roleId)}
}
