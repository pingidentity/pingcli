// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package resources

import (
	"fmt"

	"github.com/patrickcping/pingone-go-sdk-v2/management"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone"
	"github.com/pingidentity/pingcli/internal/logger"
)

// Verify that the resource satisfies the exportable resource interface
var (
	_ connector.ExportableResource = &PingOneEnvironmentResource{}
)

type PingOneEnvironmentResource struct {
	clientInfo *connector.ClientInfo
}

// Utility method for creating a PingOneEnvironmentResource
func Environment(clientInfo *connector.ClientInfo) *PingOneEnvironmentResource {
	return &PingOneEnvironmentResource{
		clientInfo: clientInfo,
	}
}

func (r *PingOneEnvironmentResource) ResourceType() string {
	return "pingone_environment"
}

func (r *PingOneEnvironmentResource) ExportAll() (*[]connector.ImportBlock, error) {
	l := logger.Get()
	l.Debug().Msgf("Exporting all '%s' Resources...", r.ResourceType())

	importBlocks := []connector.ImportBlock{}

	environmentData, err := r.getEnvironmentData()
	if err != nil {
		return nil, err
	}

	for environmentId, environmentName := range environmentData {
		commentData := map[string]string{
			"Environment ID":        environmentId,
			"Environment Name":      environmentName,
			"Export Environment ID": r.clientInfo.PingOneExportEnvironmentID,
			"Resource Type":         r.ResourceType(),
		}

		importBlock := connector.ImportBlock{
			ResourceType:       r.ResourceType(),
			ResourceName:       environmentName,
			ResourceID:         fmt.Sprintf("%s/%s", r.clientInfo.PingOneExportEnvironmentID, environmentId),
			CommentInformation: common.GenerateCommentInformation(commentData),
		}

		importBlocks = append(importBlocks, importBlock)
	}

	return &importBlocks, nil
}

func (r *PingOneEnvironmentResource) getEnvironmentData() (map[string]string, error) {
	environmentData := make(map[string]string)

	iter := r.clientInfo.PingOneApiClient.ManagementAPIClient.EnvironmentsApi.ReadAllEnvironments(r.clientInfo.PingOneContext, r.clientInfo.PingOneExportEnvironmentID).Execute()
	apiObjs, err := pingone.GetManagementAPIObjectsFromIterator[management.Environment](iter, "ReadAllEnvironments", "GetEnvironments", r.ResourceType())
	if err != nil {
		return nil, err
	}

	for _, environment := range apiObjs {
		environmentId, environmentIdOk := environment.GetIdOk()
		environmentName, environmentNameOk := environment.GetNameOk()

		if environmentIdOk && environmentNameOk {
			environmentData[*environmentId] = *environmentName
		}
	}

	return environmentData, nil
}
