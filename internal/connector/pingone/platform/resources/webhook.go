// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package resources

import (
	"fmt"

	"github.com/patrickcping/pingone-go-sdk-v2/management"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone"
	"github.com/pingidentity/pingcli/internal/logger"
)

// Verify that the resource satisfies the exportable resource interface
var (
	_ connector.ExportableResource = &PingOneWebhookResource{}
)

type PingOneWebhookResource struct {
	clientInfo *connector.ClientInfo
}

// Utility method for creating a PingOneWebhookResource
func Webhook(clientInfo *connector.ClientInfo) *PingOneWebhookResource {
	return &PingOneWebhookResource{
		clientInfo: clientInfo,
	}
}

func (r *PingOneWebhookResource) ResourceType() string {
	return "pingone_webhook"
}

func (r *PingOneWebhookResource) ExportAll() (*[]connector.ImportBlock, error) {
	l := logger.Get()
	l.Debug().Msgf("Exporting all '%s' Resources...", r.ResourceType())

	importBlocks := []connector.ImportBlock{}

	webhookData, err := r.getWebhookData()
	if err != nil {
		return nil, err
	}

	for webhookId, webhookName := range webhookData {
		commentData := map[string]string{
			"Webhook ID":            webhookId,
			"Webhook Name":          webhookName,
			"Export Environment ID": r.clientInfo.PingOneExportEnvironmentID,
			"Resource Type":         r.ResourceType(),
		}

		importBlock := connector.ImportBlock{
			ResourceType:       r.ResourceType(),
			ResourceName:       webhookName,
			ResourceID:         fmt.Sprintf("%s/%s", r.clientInfo.PingOneExportEnvironmentID, webhookId),
			CommentInformation: common.GenerateCommentInformation(commentData),
		}

		importBlocks = append(importBlocks, importBlock)
	}

	return &importBlocks, nil
}

func (r *PingOneWebhookResource) getWebhookData() (map[string]string, error) {
	webhookData := make(map[string]string)

	iter := r.clientInfo.PingOneApiClient.ManagementAPIClient.SubscriptionsWebhooksApi.ReadAllSubscriptions(r.clientInfo.PingOneContext, r.clientInfo.PingOneExportEnvironmentID).Execute()
	apiObjs, err := pingone.GetManagementAPIObjectsFromIterator[management.Subscription](iter, "ReadAllSubscriptions", "GetSubscriptions", r.ResourceType())
	if err != nil {
		return nil, err
	}

	for _, webhook := range apiObjs {
		webhookId, webhookIdOk := webhook.GetIdOk()
		webhookName, webhookNameOk := webhook.GetNameOk()

		if webhookIdOk && webhookNameOk {
			webhookData[*webhookId] = *webhookName
		}
	}

	return webhookData, nil
}
