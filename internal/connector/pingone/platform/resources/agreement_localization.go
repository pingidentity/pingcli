// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package resources

import (
	"fmt"

	"github.com/patrickcping/pingone-go-sdk-v2/management"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone"
	"github.com/pingidentity/pingcli/internal/logger"
)

// Verify that the resource satisfies the exportable resource interface
var (
	_ connector.ExportableResource = &PingOneAgreementLocalizationResource{}
)

type PingOneAgreementLocalizationResource struct {
	clientInfo *connector.ClientInfo
}

// Utility method for creating a PingOneAgreementLocalizationResource
func AgreementLocalization(clientInfo *connector.ClientInfo) *PingOneAgreementLocalizationResource {
	return &PingOneAgreementLocalizationResource{
		clientInfo: clientInfo,
	}
}

func (r *PingOneAgreementLocalizationResource) ResourceType() string {
	return "pingone_agreement_localization"
}

func (r *PingOneAgreementLocalizationResource) ExportAll() (*[]connector.ImportBlock, error) {
	l := logger.Get()
	l.Debug().Msgf("Exporting all '%s' Resources...", r.ResourceType())

	importBlocks := []connector.ImportBlock{}

	agreementLocalizationData, err := r.getAgreementLocalizationData()
	if err != nil {
		return nil, err
	}

	for agreementLocalizationId, agreementLocalizationName := range agreementLocalizationData {
		commentData := map[string]string{
			"Agreement Localization ID":   agreementLocalizationId,
			"Agreement Localization Name": agreementLocalizationName,
			"Export Environment ID":       r.clientInfo.PingOneExportEnvironmentID,
			"Resource Type":               r.ResourceType(),
		}

		importBlock := connector.ImportBlock{
			ResourceType:       r.ResourceType(),
			ResourceName:       agreementLocalizationName,
			ResourceID:         fmt.Sprintf("%s/%s", r.clientInfo.PingOneExportEnvironmentID, agreementLocalizationId),
			CommentInformation: common.GenerateCommentInformation(commentData),
		}

		importBlocks = append(importBlocks, importBlock)
	}

	return &importBlocks, nil
}

func (r *PingOneAgreementLocalizationResource) getAgreementData() (map[string]string, error) {
	//TODO
}

func (r *PingOneAgreementLocalizationResource) getAgreementLocalizationData() (map[string]string, error) {
	agreementLocalizationData := make(map[string]string)

	iter := r.clientInfo.PingOneApiClient.ManagementAPIClient.AgreementLanguagesResourcesApi.ReadAllAgreementLanguages(r.clientInfo.PingOneContext, r.clientInfo.PingOneExportEnvironmentID).Execute()
	apiObjs, err := pingone.GetManagementAPIObjectsFromIterator[management.EntityArrayEmbeddedLanguagesInner](iter, "ReadAllAgreementLanguages", "GetLanguages", r.ResourceType())
	if err != nil {
		return nil, err
	}

	for _, innerObj := range apiObjs {
		if innerObj.AgreementLanguage != nil {
			agreementLocalizationId, agreementLocalizationIdOk := inner.AgreementLanguage.GetIdOk()
			agreementLocalizationName, agreementLocalizationNameOk := inner.AgreementLanguage.GetNameOk()

			if agreementLocalizationIdOk && agreementLocalizationNameOk {
				agreementLocalizationData[*agreementLocalizationId] = *agreementLocalizationName
			}
		}
	}

	return agreementLocalizationData, nil
}
