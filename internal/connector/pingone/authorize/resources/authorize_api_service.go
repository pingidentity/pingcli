// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package resources

import (
	"fmt"

	"github.com/patrickcping/pingone-go-sdk-v2/authorize"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone"
	"github.com/pingidentity/pingcli/internal/logger"
)

// Verify that the resource satisfies the exportable resource interface
var (
	_ connector.ExportableResource = &PingOneAuthorizeApiServiceResource{}
)

type PingOneAuthorizeApiServiceResource struct {
	clientInfo *connector.ClientInfo
}

// Utility method for creating a PingOneAuthorizeApiServiceResource
func AuthorizeApiService(clientInfo *connector.ClientInfo) *PingOneAuthorizeApiServiceResource {
	return &PingOneAuthorizeApiServiceResource{
		clientInfo: clientInfo,
	}
}

func (r *PingOneAuthorizeApiServiceResource) ResourceType() string {
	return "pingone_authorize_api_service"
}

func (r *PingOneAuthorizeApiServiceResource) ExportAll() (*[]connector.ImportBlock, error) {
	l := logger.Get()
	l.Debug().Msgf("Exporting all '%s' Resources...", r.ResourceType())

	importBlocks := []connector.ImportBlock{}

	authorizeApiServiceData, err := r.getAuthorizeApiServiceData()
	if err != nil {
		return nil, err
	}

	for authorizeApiServiceId, authorizeApiServiceName := range authorizeApiServiceData {
		commentData := map[string]string{
			"Authorize Api Service ID":   authorizeApiServiceId,
			"Authorize Api Service Name": authorizeApiServiceName,
			"Export Environment ID":      r.clientInfo.PingOneExportEnvironmentID,
			"Resource Type":              r.ResourceType(),
		}

		importBlock := connector.ImportBlock{
			ResourceType:       r.ResourceType(),
			ResourceName:       authorizeApiServiceName,
			ResourceID:         fmt.Sprintf("%s/%s", r.clientInfo.PingOneExportEnvironmentID, authorizeApiServiceId),
			CommentInformation: common.GenerateCommentInformation(commentData),
		}

		importBlocks = append(importBlocks, importBlock)
	}

	return &importBlocks, nil
}

func (r *PingOneAuthorizeApiServiceResource) getAuthorizeApiServiceData() (map[string]string, error) {
	authorizeApiServiceData := make(map[string]string)

	iter := r.clientInfo.PingOneApiClient.AuthorizeAPIClient.APIServersApi.ReadAllAPIServers(r.clientInfo.PingOneContext, r.clientInfo.PingOneExportEnvironmentID).Execute()
	apiObjs, err := pingone.GetAuthorizeAPIObjectsFromIterator[authorize.APIServer](iter, "ReadAllAPIServers", "GetApiServers", r.ResourceType())
	if err != nil {
		return nil, err
	}

	for _, authorizeApiService := range apiObjs {
		authorizeApiServiceId, authorizeApiServiceIdOk := authorizeApiService.GetIdOk()
		authorizeApiServiceName, authorizeApiServiceNameOk := authorizeApiService.GetNameOk()

		if authorizeApiServiceIdOk && authorizeApiServiceNameOk {
			authorizeApiServiceData[*authorizeApiServiceId] = *authorizeApiServiceName
		}
	}

	return authorizeApiServiceData, nil
}
