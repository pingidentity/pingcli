// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package resources

import (
	"fmt"

	"github.com/patrickcping/pingone-go-sdk-v2/authorize"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone"
	"github.com/pingidentity/pingcli/internal/logger"
)

// Verify that the resource satisfies the exportable resource interface
var (
	_ connector.ExportableResource = &PingOneAuthorizeApiServiceDeploymentResource{}
)

type PingOneAuthorizeApiServiceDeploymentResource struct {
	clientInfo *connector.ClientInfo
}

// Utility method for creating a PingOneAuthorizeApiServiceDeploymentResource
func AuthorizeApiServiceDeployment(clientInfo *connector.ClientInfo) *PingOneAuthorizeApiServiceDeploymentResource {
	return &PingOneAuthorizeApiServiceDeploymentResource{
		clientInfo: clientInfo,
	}
}

func (r *PingOneAuthorizeApiServiceDeploymentResource) ResourceType() string {
	return "pingone_authorize_api_service_deployment"
}

func (r *PingOneAuthorizeApiServiceDeploymentResource) ExportAll() (*[]connector.ImportBlock, error) {
	l := logger.Get()
	l.Debug().Msgf("Exporting all '%s' Resources...", r.ResourceType())

	importBlocks := []connector.ImportBlock{}

	apiServiceData, err := r.getAPIServiceData()
	if err != nil {
		return nil, err
	}

	for apiServiceId, apiServiceName := range apiServiceData {
		ok, err := r.checkAuthorizeApiServiceDeploymentData(apiServiceId)
		if err != nil {
			return nil, err
		}
		if !ok {
			continue
		}

		commentData := map[string]string{
			"API Service ID":        apiServiceId,
			"API Service Name":      apiServiceName,
			"Resource Type":         r.ResourceType(),
			"Export Environment ID": r.clientInfo.PingOneExportEnvironmentID,
		}

		importBlock := connector.ImportBlock{
			ResourceType:       r.ResourceType(),
			ResourceName:       fmt.Sprintf("%s_deployment", apiServiceName),
			ResourceID:         fmt.Sprintf("%s/%s", r.clientInfo.PingOneExportEnvironmentID, apiServiceId),
			CommentInformation: common.GenerateCommentInformation(commentData),
		}

		importBlocks = append(importBlocks, importBlock)
	}

	return &importBlocks, nil
}

func (r *PingOneAuthorizeApiServiceDeploymentResource) getAPIServiceData() (map[string]string, error) {
	apiServiceData := make(map[string]string)

	iter := r.clientInfo.PingOneApiClient.AuthorizeAPIClient.APIServersApi.ReadAllAPIServers(r.clientInfo.PingOneContext, r.clientInfo.PingOneExportEnvironmentID).Execute()
	apiObjs, err := pingone.GetAuthorizeAPIObjectsFromIterator[authorize.APIServer](iter, "ReadAllAPIServers", "GetApiServers", r.ResourceType())
	if err != nil {
		return nil, err
	}

	for _, apiService := range apiObjs {
		apiServiceId, apiServiceIdOk := apiService.GetIdOk()
		apiServiceName, apiServiceNameOk := apiService.GetNameOk()

		if apiServiceIdOk && apiServiceNameOk {
			apiServiceData[*apiServiceId] = *apiServiceName
		}
	}

	return apiServiceData, nil
}

func (r *PingOneAuthorizeApiServiceDeploymentResource) checkAuthorizeApiServiceDeploymentData(apiServerId string) (bool, error) {
	apiObj, response, err := r.clientInfo.PingOneApiClient.AuthorizeAPIClient.APIServerDeploymentApi.ReadDeploymentStatus(r.clientInfo.PingOneContext, r.clientInfo.PingOneExportEnvironmentID, apiServerId).Execute()
	ok, err := common.CheckSingletonResource(response, err, "ReadDeploymentStatus", r.ResourceType())
	if err != nil {
		return false, err
	}
	if !ok {
		return false, nil
	}

	status, statusOk := apiObj.GetStatusOk()
	if statusOk {
		statusCode, statusCodeOk := status.GetCodeOk()
		if statusCodeOk && statusCode != nil && *statusCode != "DEPLOYMENT_UNINITIALIZED" {
			return true, nil
		}
	}

	return false, nil
}
