// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package resources

import (
	"fmt"

	"github.com/patrickcping/pingone-go-sdk-v2/authorize"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone"
	"github.com/pingidentity/pingcli/internal/logger"
)

// Verify that the resource satisfies the exportable resource interface
var (
	_ connector.ExportableResource = &PingOneAuthorizeDecisionEndpointResource{}
)

type PingOneAuthorizeDecisionEndpointResource struct {
	clientInfo *connector.ClientInfo
}

// Utility method for creating a PingOneAuthorizeDecisionEndpointResource
func AuthorizeDecisionEndpoint(clientInfo *connector.ClientInfo) *PingOneAuthorizeDecisionEndpointResource {
	return &PingOneAuthorizeDecisionEndpointResource{
		clientInfo: clientInfo,
	}
}

func (r *PingOneAuthorizeDecisionEndpointResource) ResourceType() string {
	return "pingone_authorize_decision_endpoint"
}

func (r *PingOneAuthorizeDecisionEndpointResource) ExportAll() (*[]connector.ImportBlock, error) {
	l := logger.Get()
	l.Debug().Msgf("Exporting all '%s' Resources...", r.ResourceType())

	importBlocks := []connector.ImportBlock{}

	authorizeDecisionEndpointData, err := r.getAuthorizeDecisionEndpointData()
	if err != nil {
		return nil, err
	}

	for authorizeDecisionEndpointId, authorizeDecisionEndpointName := range authorizeDecisionEndpointData {
		commentData := map[string]string{
			"Authorize Decision Endpoint ID":   authorizeDecisionEndpointId,
			"Authorize Decision Endpoint Name": authorizeDecisionEndpointName,
			"Export Environment ID":            r.clientInfo.PingOneExportEnvironmentID,
			"Resource Type":                    r.ResourceType(),
		}

		importBlock := connector.ImportBlock{
			ResourceType:       r.ResourceType(),
			ResourceName:       authorizeDecisionEndpointName,
			ResourceID:         fmt.Sprintf("%s/%s", r.clientInfo.PingOneExportEnvironmentID, authorizeDecisionEndpointId),
			CommentInformation: common.GenerateCommentInformation(commentData),
		}

		importBlocks = append(importBlocks, importBlock)
	}

	return &importBlocks, nil
}

func (r *PingOneAuthorizeDecisionEndpointResource) getAuthorizeDecisionEndpointData() (map[string]string, error) {
	authorizeDecisionEndpointData := make(map[string]string)

	iter := r.clientInfo.PingOneApiClient.AuthorizeAPIClient.PolicyDecisionManagementApi.ReadAllDecisionEndpoints(r.clientInfo.PingOneContext, r.clientInfo.PingOneExportEnvironmentID).Execute()
	apiObjs, err := pingone.GetAuthorizeAPIObjectsFromIterator[authorize.DecisionEndpoint](iter, "ReadAllDecisionEndpoints", "GetDecisionEndpoints", r.ResourceType())
	if err != nil {
		return nil, err
	}

	for _, authorizeDecisionEndpoint := range apiObjs {
		authorizeDecisionEndpointId, authorizeDecisionEndpointIdOk := authorizeDecisionEndpoint.GetIdOk()
		authorizeDecisionEndpointName, authorizeDecisionEndpointNameOk := authorizeDecisionEndpoint.GetNameOk()

		if authorizeDecisionEndpointIdOk && authorizeDecisionEndpointNameOk {
			authorizeDecisionEndpointData[*authorizeDecisionEndpointId] = *authorizeDecisionEndpointName
		}
	}

	return authorizeDecisionEndpointData, nil
}
