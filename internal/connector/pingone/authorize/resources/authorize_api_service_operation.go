// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package resources

import (
	"fmt"

	"github.com/patrickcping/pingone-go-sdk-v2/authorize"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone"
	"github.com/pingidentity/pingcli/internal/logger"
)

// Verify that the resource satisfies the exportable resource interface
var (
	_ connector.ExportableResource = &PingOneAuthorizeApiServiceOperationResource{}
)

type PingOneAuthorizeApiServiceOperationResource struct {
	clientInfo *connector.ClientInfo
}

// Utility method for creating a PingOneAuthorizeApiServiceOperationResource
func AuthorizeApiServiceOperation(clientInfo *connector.ClientInfo) *PingOneAuthorizeApiServiceOperationResource {
	return &PingOneAuthorizeApiServiceOperationResource{
		clientInfo: clientInfo,
	}
}

func (r *PingOneAuthorizeApiServiceOperationResource) ResourceType() string {
	return "pingone_authorize_api_service_operation"
}

func (r *PingOneAuthorizeApiServiceOperationResource) ExportAll() (*[]connector.ImportBlock, error) {
	l := logger.Get()
	l.Debug().Msgf("Exporting all '%s' Resources...", r.ResourceType())

	importBlocks := []connector.ImportBlock{}

	apiServerData, err := r.getApiServerData()
	if err != nil {
		return nil, err
	}

	for apiServerId, apiServerName := range apiServerData {
		authorizeApiServiceOperationData, err := r.getAuthorizeApiServiceOperationData(apiServerId)
		if err != nil {
			return nil, err
		}

		for authorizeApiServiceOperationId, authorizeApiServiceOperationName := range authorizeApiServiceOperationData {
			commentData := map[string]string{
				"Authorize Api Server ID":             apiServerId,
				"Authorize Api Server Name":           apiServerName,
				"Authorize Api Server Operation ID":   authorizeApiServiceOperationId,
				"Authorize Api Server Operation Name": authorizeApiServiceOperationName,
				"Export Environment ID":               r.clientInfo.PingOneExportEnvironmentID,
				"Resource Type":                       r.ResourceType(),
			}

			importBlock := connector.ImportBlock{
				ResourceType:       r.ResourceType(),
				ResourceName:       fmt.Sprintf("%s_%s", apiServerName, authorizeApiServiceOperationName),
				ResourceID:         fmt.Sprintf("%s/%s/%s", r.clientInfo.PingOneExportEnvironmentID, apiServerId, authorizeApiServiceOperationId),
				CommentInformation: common.GenerateCommentInformation(commentData),
			}

			importBlocks = append(importBlocks, importBlock)
		}
	}

	return &importBlocks, nil
}

func (r *PingOneAuthorizeApiServiceOperationResource) getApiServerData() (map[string]string, error) {
	apiServerData := make(map[string]string)

	iter := r.clientInfo.PingOneApiClient.AuthorizeAPIClient.APIServersApi.ReadAllAPIServers(r.clientInfo.PingOneContext, r.clientInfo.PingOneExportEnvironmentID).Execute()
	apiObjs, err := pingone.GetAuthorizeAPIObjectsFromIterator[authorize.APIServer](iter, "ReadAllAPIServers", "GetApiServers", r.ResourceType())
	if err != nil {
		return nil, err
	}

	for _, apiServer := range apiObjs {
		apiServerId, apiServerIdOk := apiServer.GetIdOk()
		apiServerName, apiServerNameOk := apiServer.GetNameOk()

		if apiServerIdOk && apiServerNameOk {
			apiServerData[*apiServerId] = *apiServerName
		}
	}

	return apiServerData, nil
}

func (r *PingOneAuthorizeApiServiceOperationResource) getAuthorizeApiServiceOperationData(apiServerId string) (map[string]string, error) {
	authorizeApiServiceOperationData := make(map[string]string)

	iter := r.clientInfo.PingOneApiClient.AuthorizeAPIClient.APIServerOperationsApi.ReadAllAPIServerOperations(r.clientInfo.PingOneContext, r.clientInfo.PingOneExportEnvironmentID, apiServerId).Execute()
	apiObjs, err := pingone.GetAuthorizeAPIObjectsFromIterator[authorize.APIServerOperation](iter, "ReadAllAPIServerOperations", "GetOperations", r.ResourceType())
	if err != nil {
		return nil, err
	}

	for _, authorizeApiServiceOperation := range apiObjs {
		authorizeApiServiceOperationId, authorizeApiServiceOperationIdOk := authorizeApiServiceOperation.GetIdOk()
		authorizeApiServiceOperationName, authorizeApiServiceOperationNameOk := authorizeApiServiceOperation.GetNameOk()

		if authorizeApiServiceOperationIdOk && authorizeApiServiceOperationNameOk {
			authorizeApiServiceOperationData[*authorizeApiServiceOperationId] = *authorizeApiServiceOperationName
		}
	}

	return authorizeApiServiceOperationData, nil
}
