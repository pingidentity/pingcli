// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package resources

import (
	"fmt"

	"github.com/patrickcping/pingone-go-sdk-v2/mfa"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone"
	"github.com/pingidentity/pingcli/internal/logger"
)

// Verify that the resource satisfies the exportable resource interface
var (
	_ connector.ExportableResource = &PingOneMfaFido2PolicyResource{}
)

type PingOneMfaFido2PolicyResource struct {
	clientInfo *connector.ClientInfo
}

// Utility method for creating a PingOneMfaFido2PolicyResource
func MfaFido2Policy(clientInfo *connector.ClientInfo) *PingOneMfaFido2PolicyResource {
	return &PingOneMfaFido2PolicyResource{
		clientInfo: clientInfo,
	}
}

func (r *PingOneMfaFido2PolicyResource) ResourceType() string {
	return "pingone_mfa_fido2_policy"
}

func (r *PingOneMfaFido2PolicyResource) ExportAll() (*[]connector.ImportBlock, error) {
	l := logger.Get()
	l.Debug().Msgf("Exporting all '%s' Resources...", r.ResourceType())

	importBlocks := []connector.ImportBlock{}

	mfaFido2PolicyData, err := r.getMfaFido2PolicyData()
	if err != nil {
		return nil, err
	}

	for mfaFido2PolicyId, mfaFido2PolicyName := range mfaFido2PolicyData {
		commentData := map[string]string{
			"Mfa Fido2 Policy ID":   mfaFido2PolicyId,
			"Mfa Fido2 Policy Name": mfaFido2PolicyName,
			"Export Environment ID": r.clientInfo.PingOneExportEnvironmentID,
			"Resource Type":         r.ResourceType(),
		}

		importBlock := connector.ImportBlock{
			ResourceType:       r.ResourceType(),
			ResourceName:       mfaFido2PolicyName,
			ResourceID:         fmt.Sprintf("%s/%s", r.clientInfo.PingOneExportEnvironmentID, mfaFido2PolicyId),
			CommentInformation: common.GenerateCommentInformation(commentData),
		}

		importBlocks = append(importBlocks, importBlock)
	}

	return &importBlocks, nil
}

func (r *PingOneMfaFido2PolicyResource) getMfaFido2PolicyData() (map[string]string, error) {
	mfaFido2PolicyData := make(map[string]string)

	iter := r.clientInfo.PingOneApiClient.MFAAPIClient.FIDO2PolicyApi.ReadFIDO2Policies(r.clientInfo.PingOneContext, r.clientInfo.PingOneExportEnvironmentID).Execute()
	apiObjs, err := pingone.GetMfaAPIObjectsFromIterator[mfa.FIDO2Policy](iter, "ReadFIDO2Policies", "GetFido2Policies", r.ResourceType())
	if err != nil {
		return nil, err
	}

	for _, mfaFido2Policy := range apiObjs {
		mfaFido2PolicyId, mfaFido2PolicyIdOk := mfaFido2Policy.GetIdOk()
		mfaFido2PolicyName, mfaFido2PolicyNameOk := mfaFido2Policy.GetNameOk()

		if mfaFido2PolicyIdOk && mfaFido2PolicyNameOk {
			mfaFido2PolicyData[*mfaFido2PolicyId] = *mfaFido2PolicyName
		}
	}

	return mfaFido2PolicyData, nil
}
