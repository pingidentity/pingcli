// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pingcli_command.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PingCliCommand_Configuration_FullMethodName = "/PingCliCommand/Configuration"
	PingCliCommand_Run_FullMethodName           = "/PingCliCommand/Run"
)

// PingCliCommandClient is the client API for PingCliCommand service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PingCliCommandClient interface {
	Configuration(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingCliCommandConfigurationResponse, error)
	Run(ctx context.Context, in *PingCliCommandRunRequest, opts ...grpc.CallOption) (*Empty, error)
}

type pingCliCommandClient struct {
	cc grpc.ClientConnInterface
}

func NewPingCliCommandClient(cc grpc.ClientConnInterface) PingCliCommandClient {
	return &pingCliCommandClient{cc}
}

func (c *pingCliCommandClient) Configuration(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingCliCommandConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingCliCommandConfigurationResponse)
	err := c.cc.Invoke(ctx, PingCliCommand_Configuration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingCliCommandClient) Run(ctx context.Context, in *PingCliCommandRunRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PingCliCommand_Run_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PingCliCommandServer is the server API for PingCliCommand service.
// All implementations must embed UnimplementedPingCliCommandServer
// for forward compatibility.
type PingCliCommandServer interface {
	Configuration(context.Context, *Empty) (*PingCliCommandConfigurationResponse, error)
	Run(context.Context, *PingCliCommandRunRequest) (*Empty, error)
	mustEmbedUnimplementedPingCliCommandServer()
}

// UnimplementedPingCliCommandServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPingCliCommandServer struct{}

func (UnimplementedPingCliCommandServer) Configuration(context.Context, *Empty) (*PingCliCommandConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configuration not implemented")
}
func (UnimplementedPingCliCommandServer) Run(context.Context, *PingCliCommandRunRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedPingCliCommandServer) mustEmbedUnimplementedPingCliCommandServer() {}
func (UnimplementedPingCliCommandServer) testEmbeddedByValue()                        {}

// UnsafePingCliCommandServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PingCliCommandServer will
// result in compilation errors.
type UnsafePingCliCommandServer interface {
	mustEmbedUnimplementedPingCliCommandServer()
}

func RegisterPingCliCommandServer(s grpc.ServiceRegistrar, srv PingCliCommandServer) {
	// If the following call pancis, it indicates UnimplementedPingCliCommandServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PingCliCommand_ServiceDesc, srv)
}

func _PingCliCommand_Configuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingCliCommandServer).Configuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PingCliCommand_Configuration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingCliCommandServer).Configuration(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PingCliCommand_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingCliCommandRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingCliCommandServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PingCliCommand_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingCliCommandServer).Run(ctx, req.(*PingCliCommandRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PingCliCommand_ServiceDesc is the grpc.ServiceDesc for PingCliCommand service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PingCliCommand_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PingCliCommand",
	HandlerType: (*PingCliCommandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configuration",
			Handler:    _PingCliCommand_Configuration_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _PingCliCommand_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pingcli_command.proto",
}

const (
	Logger_Message_FullMethodName     = "/Logger/Message"
	Logger_Success_FullMethodName     = "/Logger/Success"
	Logger_Warn_FullMethodName        = "/Logger/Warn"
	Logger_UserError_FullMethodName   = "/Logger/UserError"
	Logger_UserFatal_FullMethodName   = "/Logger/UserFatal"
	Logger_PluginError_FullMethodName = "/Logger/PluginError"
)

// LoggerClient is the client API for Logger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoggerClient interface {
	Message(ctx context.Context, in *LoggerRequest, opts ...grpc.CallOption) (*Empty, error)
	Success(ctx context.Context, in *LoggerRequest, opts ...grpc.CallOption) (*Empty, error)
	Warn(ctx context.Context, in *LoggerRequest, opts ...grpc.CallOption) (*Empty, error)
	UserError(ctx context.Context, in *LoggerRequest, opts ...grpc.CallOption) (*Empty, error)
	UserFatal(ctx context.Context, in *LoggerRequest, opts ...grpc.CallOption) (*Empty, error)
	PluginError(ctx context.Context, in *LoggerRequest, opts ...grpc.CallOption) (*Empty, error)
}

type loggerClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggerClient(cc grpc.ClientConnInterface) LoggerClient {
	return &loggerClient{cc}
}

func (c *loggerClient) Message(ctx context.Context, in *LoggerRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Logger_Message_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) Success(ctx context.Context, in *LoggerRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Logger_Success_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) Warn(ctx context.Context, in *LoggerRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Logger_Warn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) UserError(ctx context.Context, in *LoggerRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Logger_UserError_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) UserFatal(ctx context.Context, in *LoggerRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Logger_UserFatal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerClient) PluginError(ctx context.Context, in *LoggerRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Logger_PluginError_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggerServer is the server API for Logger service.
// All implementations must embed UnimplementedLoggerServer
// for forward compatibility.
type LoggerServer interface {
	Message(context.Context, *LoggerRequest) (*Empty, error)
	Success(context.Context, *LoggerRequest) (*Empty, error)
	Warn(context.Context, *LoggerRequest) (*Empty, error)
	UserError(context.Context, *LoggerRequest) (*Empty, error)
	UserFatal(context.Context, *LoggerRequest) (*Empty, error)
	PluginError(context.Context, *LoggerRequest) (*Empty, error)
	mustEmbedUnimplementedLoggerServer()
}

// UnimplementedLoggerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoggerServer struct{}

func (UnimplementedLoggerServer) Message(context.Context, *LoggerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Message not implemented")
}
func (UnimplementedLoggerServer) Success(context.Context, *LoggerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Success not implemented")
}
func (UnimplementedLoggerServer) Warn(context.Context, *LoggerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Warn not implemented")
}
func (UnimplementedLoggerServer) UserError(context.Context, *LoggerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserError not implemented")
}
func (UnimplementedLoggerServer) UserFatal(context.Context, *LoggerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFatal not implemented")
}
func (UnimplementedLoggerServer) PluginError(context.Context, *LoggerRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PluginError not implemented")
}
func (UnimplementedLoggerServer) mustEmbedUnimplementedLoggerServer() {}
func (UnimplementedLoggerServer) testEmbeddedByValue()                {}

// UnsafeLoggerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoggerServer will
// result in compilation errors.
type UnsafeLoggerServer interface {
	mustEmbedUnimplementedLoggerServer()
}

func RegisterLoggerServer(s grpc.ServiceRegistrar, srv LoggerServer) {
	// If the following call pancis, it indicates UnimplementedLoggerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Logger_ServiceDesc, srv)
}

func _Logger_Message_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).Message(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logger_Message_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).Message(ctx, req.(*LoggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_Success_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).Success(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logger_Success_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).Success(ctx, req.(*LoggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_Warn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).Warn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logger_Warn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).Warn(ctx, req.(*LoggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_UserError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).UserError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logger_UserError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).UserError(ctx, req.(*LoggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_UserFatal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).UserFatal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logger_UserFatal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).UserFatal(ctx, req.(*LoggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logger_PluginError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServer).PluginError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logger_PluginError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServer).PluginError(ctx, req.(*LoggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Logger_ServiceDesc is the grpc.ServiceDesc for Logger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Logger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Logger",
	HandlerType: (*LoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Message",
			Handler:    _Logger_Message_Handler,
		},
		{
			MethodName: "Success",
			Handler:    _Logger_Success_Handler,
		},
		{
			MethodName: "Warn",
			Handler:    _Logger_Warn_Handler,
		},
		{
			MethodName: "UserError",
			Handler:    _Logger_UserError_Handler,
		},
		{
			MethodName: "UserFatal",
			Handler:    _Logger_UserFatal_Handler,
		},
		{
			MethodName: "PluginError",
			Handler:    _Logger_PluginError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pingcli_command.proto",
}
