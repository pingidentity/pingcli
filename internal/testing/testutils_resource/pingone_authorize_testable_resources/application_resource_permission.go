// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package pingone_authorize_testable_resources

import (
	"fmt"
	"testing"

	"github.com/patrickcping/pingone-go-sdk-v2/authorize"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone/authorize/resources"
	"github.com/pingidentity/pingcli/internal/testing/testutils_resource"
	"github.com/pingidentity/pingcli/internal/utils"
)

func ApplicationResourcePermission(t *testing.T, clientInfo *connector.ClientInfo) *testutils_resource.TestableResource {
	t.Helper()

	return &testutils_resource.TestableResource{
		ClientInfo: clientInfo,
		CreateFunc: createApplicationResourcePermission,
		DeleteFunc: deleteApplicationResourcePermission,
		Dependencies: []*testutils_resource.TestableResource{
			ApplicationResource(t, clientInfo),
		},
		ExportableResource: resources.ApplicationResourcePermission(clientInfo),
	}
}

func createApplicationResourcePermission(t *testing.T, clientInfo *connector.ClientInfo, resourceType string, strArgs ...string) testutils_resource.ResourceInfo {
	t.Helper()

	if len(strArgs) != 2 {
		t.Errorf("Unexpected number of arguments provided to createApplicationResourcePermission(): %v", strArgs)

		return testutils_resource.ResourceInfo{}
	}
	applicationResourceId := strArgs[1]

	request := clientInfo.PingOneApiClient.AuthorizeAPIClient.ApplicationResourcePermissionsApi.CreateApplicationPermission(clientInfo.PingOneContext, clientInfo.PingOneExportEnvironmentID, applicationResourceId)
	clientStruct := authorize.ApplicationResourcePermission{
		Action:      "write",
		Description: utils.Pointer("Update documents"),
	}

	request = request.ApplicationResourcePermission(clientStruct)

	resource, response, err := request.Execute()
	ok, err := common.HandleClientResponse(response, err, "CreateApplicationPermission", resourceType)
	if err != nil {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s\nError: %v", response.Status, response.Body, err)

		return testutils_resource.ResourceInfo{}
	}
	if !ok {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s", response.Status, response.Body)

		return testutils_resource.ResourceInfo{}
	}

	return testutils_resource.ResourceInfo{
		DeletionIds: []string{
			applicationResourceId,
			*resource.Id,
		},
		CreationInfo: map[testutils_resource.ResourceCreationInfoType]string{
			testutils_resource.ENUM_ID:   *resource.Id,
			testutils_resource.ENUM_NAME: fmt.Sprintf("%s:%s", *resource.Resource.Name, resource.Action),
		},
	}
}

func deleteApplicationResourcePermission(t *testing.T, clientInfo *connector.ClientInfo, resourceType string, ids ...string) {
	t.Helper()

	if len(ids) != 2 {
		t.Errorf("Unexpected number of arguments provided to deleteApplicationResourcePermission(): %v", ids)

		return
	}

	request := clientInfo.PingOneApiClient.AuthorizeAPIClient.ApplicationResourcePermissionsApi.DeleteApplicationPermission(clientInfo.PingOneContext, clientInfo.PingOneExportEnvironmentID, ids[0], ids[1])

	response, err := request.Execute()
	ok, err := common.HandleClientResponse(response, err, "DeleteApplicationPermission", resourceType)
	if err != nil {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s\nError: %v", response.Status, response.Body, err)

		return
	}
	if !ok {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s", response.Status, response.Body)

		return
	}
}
