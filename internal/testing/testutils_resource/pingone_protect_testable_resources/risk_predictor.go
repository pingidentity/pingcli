// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package pingone_protect_testable_resources

import (
	"testing"

	"github.com/patrickcping/pingone-go-sdk-v2/risk"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone/protect/resources"
	"github.com/pingidentity/pingcli/internal/testing/testutils_resource"
	"github.com/pingidentity/pingcli/internal/utils"
)

func RiskPredictor(t *testing.T, clientInfo *connector.ClientInfo) *testutils_resource.TestableResource {
	t.Helper()

	return &testutils_resource.TestableResource{
		ClientInfo:         clientInfo,
		CreateFunc:         createRiskPredictor,
		DeleteFunc:         deleteRiskPredictor,
		Dependencies:       nil,
		ExportableResource: resources.RiskPredictor(clientInfo),
	}
}

func createRiskPredictor(t *testing.T, clientInfo *connector.ClientInfo, resourceType string, strArgs ...string) testutils_resource.ResourceInfo {
	t.Helper()

	if len(strArgs) != 0 {
		t.Errorf("Unexpected number of arguments provided to createRiskPredictor(): %v", strArgs)

		return testutils_resource.ResourceInfo{}
	}

	request := clientInfo.PingOneApiClient.RiskAPIClient.RiskAdvancedPredictorsApi.CreateRiskPredictor(clientInfo.PingOneContext, clientInfo.PingOneExportEnvironmentID)
	clientStruct := risk.RiskPredictor{
		RiskPredictorCustom: &risk.RiskPredictorCustom{
			Name:        "Device country - custom",
			CompactName: "deviceCountryCustom",
			Map: risk.RiskPredictorCustomAllOfMap{
				High: &risk.RiskPredictorCustomItem{
					RiskPredictorCustomItemList: &risk.RiskPredictorCustomItemList{
						List: []string{
							"Iran",
							"Syria",
						},
						Contains: "${details.country}",
					},
				},
				Medium: &risk.RiskPredictorCustomItem{
					RiskPredictorCustomItemList: &risk.RiskPredictorCustomItemList{
						List: []string{
							"Ethiopia",
							"Russia",
						},
						Contains: "${details.country}",
					},
				},
			},
			Type: risk.ENUMPREDICTORTYPE_MAP,
			Default: &risk.RiskPredictorCommonDefault{
				Result: &risk.RiskPredictorCommonDefaultResult{
					Level: utils.Pointer(risk.ENUMRISKLEVEL_MEDIUM),
				},
			},
		},
	}

	request = request.RiskPredictor(clientStruct)

	resource, response, err := request.Execute()
	ok, err := common.HandleClientResponse(response, err, "CreateRiskPredictor", resourceType)
	if err != nil {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s\nError: %v", response.Status, response.Body, err)

		return testutils_resource.ResourceInfo{}
	}
	if !ok {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s", response.Status, response.Body)

		return testutils_resource.ResourceInfo{}
	}

	return testutils_resource.ResourceInfo{
		DeletionIds: []string{
			*resource.RiskPredictorCustom.Id,
		},
		CreationInfo: map[testutils_resource.ResourceCreationInfoType]string{
			testutils_resource.ENUM_ID:   *resource.RiskPredictorCustom.Id,
			testutils_resource.ENUM_NAME: resource.RiskPredictorCustom.Name,
			testutils_resource.ENUM_TYPE: string(resource.RiskPredictorCustom.Type),
		},
	}
}

func deleteRiskPredictor(t *testing.T, clientInfo *connector.ClientInfo, resourceType string, ids ...string) {
	t.Helper()

	if len(ids) != 1 {
		t.Errorf("Unexpected number of arguments provided to deleteRiskPredictor(): %v", ids)

		return
	}

	request := clientInfo.PingOneApiClient.RiskAPIClient.RiskAdvancedPredictorsApi.DeleteRiskAdvancedPredictor(clientInfo.PingOneContext, clientInfo.PingOneExportEnvironmentID, ids[0])

	response, err := request.Execute()
	ok, err := common.HandleClientResponse(response, err, "DeleteRiskAdvancedPredictor", resourceType)
	if err != nil {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s\nError: %v", response.Status, response.Body, err)

		return
	}
	if !ok {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s", response.Status, response.Body)

		return
	}
}
