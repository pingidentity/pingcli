// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package pingone_sso_testable_resources

import (
	"testing"

	"github.com/patrickcping/pingone-go-sdk-v2/management"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone"
	"github.com/pingidentity/pingcli/internal/connector/pingone/sso/resources"
	"github.com/pingidentity/pingcli/internal/testing/testutils_resource"
	"github.com/pingidentity/pingcli/internal/utils"
)

func SchemaAttribute(t *testing.T, clientInfo *connector.ClientInfo) *testutils_resource.TestableResource {
	t.Helper()

	return &testutils_resource.TestableResource{
		ClientInfo:         clientInfo,
		CreateFunc:         createSchemaAttribute,
		DeleteFunc:         deleteSchemaAttribute,
		Dependencies:       nil,
		ExportableResource: resources.SchemaAttribute(clientInfo),
	}
}

func createSchemaAttribute(t *testing.T, clientInfo *connector.ClientInfo, resourceType string, strArgs ...string) testutils_resource.ResourceInfo {
	t.Helper()

	if len(strArgs) != 0 {
		t.Errorf("Unexpected number of arguments provided to createSchemaAttribute(): %v", strArgs)

		return testutils_resource.ResourceInfo{}
	}

	iter := clientInfo.PingOneApiClient.ManagementAPIClient.SchemasApi.ReadAllSchemas(clientInfo.PingOneContext, clientInfo.PingOneExportEnvironmentID).Execute()
	apiObjs, err := pingone.GetManagementAPIObjectsFromIterator[management.Schema](iter, "ReadAllSchemas", "GetSchemas", resourceType)
	if err != nil {
		t.Errorf("Failed to execute PingOne client function\nError: %v", err)

		return testutils_resource.ResourceInfo{}
	}

	if len(apiObjs) == 0 {
		t.Fatal("Failed to execute PingOne client function\n No built-in schemas returned from ReadAllSchemas()")
	}

	schemaId := apiObjs[0].Id
	schemaName := apiObjs[0].Name

	request := clientInfo.PingOneApiClient.ManagementAPIClient.SchemasApi.CreateAttribute(clientInfo.PingOneContext, clientInfo.PingOneExportEnvironmentID, *schemaId)
	clientStruct := management.SchemaAttribute{
		Name:        "TestSchemaAttribute",
		SchemaType:  utils.Pointer(management.ENUMSCHEMAATTRIBUTESCHEMATYPE_CUSTOM),
		Type:        management.ENUMSCHEMAATTRIBUTETYPE_STRING,
		Unique:      utils.Pointer(false),
		Enabled:     false,
		MultiValued: utils.Pointer(false),
		RegexValidation: &management.SchemaAttributeRegexValidation{
			Pattern:      "xs|XS|s|S|m|M|l|L|xl|XL|xxl|XXL",
			Requirements: "Must be a T-shirt size from XS to XXL",
			ValuesPatternShouldMatch: []string{
				"xs",
				"XXL",
			},
			ValuesPatternShouldNotMatch: []string{
				"xL",
				"x",
			},
		},
	}

	request = request.SchemaAttribute(clientStruct)

	resource, response, err := request.Execute()
	ok, err := common.HandleClientResponse(response, err, "CreateAttribute", resourceType)
	if err != nil {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s\nError: %v", response.Status, response.Body, err)

		return testutils_resource.ResourceInfo{}
	}
	if !ok {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s", response.Status, response.Body)

		return testutils_resource.ResourceInfo{}
	}

	return testutils_resource.ResourceInfo{
		DeletionIds: []string{
			*schemaId,
			*resource.Id,
		},
		CreationInfo: map[testutils_resource.ResourceCreationInfoType]string{
			testutils_resource.ENUM_ID:          *resource.Id,
			testutils_resource.ENUM_NAME:        resource.Name,
			testutils_resource.ENUM_SCHEMA_ID:   *schemaId,
			testutils_resource.ENUM_SCHEMA_NAME: *schemaName,
		},
	}
}

func deleteSchemaAttribute(t *testing.T, clientInfo *connector.ClientInfo, resourceType string, ids ...string) {
	t.Helper()

	if len(ids) != 2 {
		t.Errorf("Unexpected number of arguments provided to deleteSchemaAttribute(): %v", ids)

		return
	}

	request := clientInfo.PingOneApiClient.ManagementAPIClient.SchemasApi.DeleteAttribute(clientInfo.PingOneContext, clientInfo.PingOneExportEnvironmentID, ids[0], ids[1])

	response, err := request.Execute()
	ok, err := common.HandleClientResponse(response, err, "DeleteAttribute", resourceType)
	if err != nil {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s\nError: %v", response.Status, response.Body, err)

		return
	}
	if !ok {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s", response.Status, response.Body)

		return
	}
}
