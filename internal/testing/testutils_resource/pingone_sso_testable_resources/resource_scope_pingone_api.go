// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package pingone_sso_testable_resources

import (
	"testing"

	"github.com/patrickcping/pingone-go-sdk-v2/management"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone"
	"github.com/pingidentity/pingcli/internal/connector/pingone/sso/resources"
	"github.com/pingidentity/pingcli/internal/testing/testutils_resource"
	"github.com/pingidentity/pingcli/internal/utils"
)

func ResourceScopePingOneApi(t *testing.T, clientInfo *connector.ClientInfo) *testutils_resource.TestableResource {
	t.Helper()

	return &testutils_resource.TestableResource{
		ClientInfo:         clientInfo,
		CreateFunc:         createResourceScopePingoneApi,
		DeleteFunc:         deleteResourceScopePingoneApi,
		Dependencies:       nil,
		ExportableResource: resources.ResourceScopePingOneApi(clientInfo),
	}
}

func createResourceScopePingoneApi(t *testing.T, clientInfo *connector.ClientInfo, resourceType string, strArgs ...string) testutils_resource.ResourceInfo {
	t.Helper()

	if len(strArgs) != 0 {
		t.Errorf("Unexpected number of arguments provided to createResourceScopePingoneApi(): %v", strArgs)

		return testutils_resource.ResourceInfo{}
	}

	iter := clientInfo.PingOneApiClient.ManagementAPIClient.ResourcesApi.ReadAllResources(clientInfo.PingOneContext, clientInfo.PingOneExportEnvironmentID).Execute()
	generatedResources, err := pingone.GetManagementAPIObjectsFromIterator[management.EntityArrayEmbeddedResourcesInner](iter, "ReadAllResources", "GetResources", resourceType)
	if err != nil {
		t.Errorf("Failed to execute PingOne client function\nError: %v", err)

		return testutils_resource.ResourceInfo{}
	}

	var resourceId string
	for _, generatedResource := range generatedResources {
		if generatedResource.Resource != nil && generatedResource.Resource.Name == "PingOne API" && *generatedResource.Resource.Type == management.ENUMRESOURCETYPE_PINGONE_API {
			resourceId = *generatedResource.Resource.Id

			break
		}
	}

	request := clientInfo.PingOneApiClient.ManagementAPIClient.ResourceScopesApi.CreateResourceScope(clientInfo.PingOneContext, clientInfo.PingOneExportEnvironmentID, resourceId)
	clientStruct := management.ResourceScope{
		Name:        "p1:update:user:email-only",
		Description: utils.Pointer("Access control scope to limit update to email only"),
		SchemaAttributes: []string{
			"name.family",
			"name.given",
		},
	}

	request = request.ResourceScope(clientStruct)

	resource, response, err := request.Execute()
	ok, err := common.HandleClientResponse(response, err, "CreateResourceScope", resourceType)
	if err != nil {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s\nError: %v", response.Status, response.Body, err)

		return testutils_resource.ResourceInfo{}
	}
	if !ok {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s", response.Status, response.Body)

		return testutils_resource.ResourceInfo{}
	}

	return testutils_resource.ResourceInfo{
		DeletionIds: []string{
			resourceId,
			*resource.Id,
		},
		CreationInfo: map[testutils_resource.ResourceCreationInfoType]string{
			testutils_resource.ENUM_ID:   *resource.Id,
			testutils_resource.ENUM_NAME: resource.Name,
		},
	}
}

func deleteResourceScopePingoneApi(t *testing.T, clientInfo *connector.ClientInfo, resourceType string, ids ...string) {
	t.Helper()

	if len(ids) != 2 {
		t.Errorf("Unexpected number of arguments provided to deleteResourceScopePingoneApi(): %v", ids)

		return
	}

	request := clientInfo.PingOneApiClient.ManagementAPIClient.ResourceScopesApi.DeleteResourceScope(clientInfo.PingOneContext, clientInfo.PingOneExportEnvironmentID, ids[0], ids[1])

	response, err := request.Execute()
	ok, err := common.HandleClientResponse(response, err, "DeleteResourceScope", resourceType)
	if err != nil {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s\nError: %v", response.Status, response.Body, err)

		return
	}
	if !ok {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s", response.Status, response.Body)

		return
	}
}
