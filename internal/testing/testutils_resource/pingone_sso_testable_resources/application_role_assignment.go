// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package pingone_sso_testable_resources

import (
	"testing"

	"github.com/patrickcping/pingone-go-sdk-v2/management"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone"
	"github.com/pingidentity/pingcli/internal/connector/pingone/sso/resources"
	"github.com/pingidentity/pingcli/internal/testing/testutils_resource"
)

func ApplicationRoleAssignment(t *testing.T, clientInfo *connector.ClientInfo) *testutils_resource.TestableResource {
	t.Helper()

	return &testutils_resource.TestableResource{
		ClientInfo: clientInfo,
		CreateFunc: createApplicationRoleAssignment,
		DeleteFunc: deleteApplicationRoleAssignment,
		Dependencies: []*testutils_resource.TestableResource{
			ApplicationWorker(t, clientInfo),
		},
		ExportableResource: resources.ApplicationRoleAssignment(clientInfo),
	}
}

func createApplicationRoleAssignment(t *testing.T, clientInfo *connector.ClientInfo, resourceType string, strArgs ...string) testutils_resource.ResourceInfo {
	t.Helper()

	if len(strArgs) != 1 {
		t.Errorf("Unexpected number of arguments provided to createApplicationRoleAssignment(): %v", strArgs)

		return testutils_resource.ResourceInfo{}
	}
	applicationId := strArgs[0]

	iter := clientInfo.PingOneApiClient.ManagementAPIClient.RolesApi.ReadAllRoles(clientInfo.PingOneContext).Execute()
	apiObjs, err := pingone.GetManagementAPIObjectsFromIterator[management.EntityArrayEmbeddedRolesInner](iter, "ReadAllRoles", "GetRoles", resourceType)
	if err != nil {
		t.Errorf("Failed to execute PingOne client function\nError: %v", err)

		return testutils_resource.ResourceInfo{}
	}
	if len(apiObjs) == 0 {
		t.Fatal("Failed to execute PingOne client function\n No built-in roles returned from ReadAllRoles()")
	}

	var (
		roleId   string
		roleName string
	)

	for _, role := range apiObjs {
		if role.Role != nil {
			if role.Role.Name != nil && *role.Role.Name == management.ENUMROLENAME_APPLICATION_OWNER {
				roleId = *role.Role.Id
				roleName = string(*role.Role.Name)

				break
			}
		}
	}

	request := clientInfo.PingOneApiClient.ManagementAPIClient.ApplicationRoleAssignmentsApi.CreateApplicationRoleAssignment(clientInfo.PingOneContext, clientInfo.PingOneExportEnvironmentID, applicationId)
	clientStruct := management.RoleAssignment{
		Role: management.RoleAssignmentRole{
			Id: roleId,
		},
		Scope: management.RoleAssignmentScope{
			Id:   clientInfo.PingOneExportEnvironmentID,
			Type: management.ENUMROLEASSIGNMENTSCOPETYPE_ENVIRONMENT,
		},
	}

	request = request.RoleAssignment(clientStruct)

	resource, response, err := request.Execute()
	ok, err := common.HandleClientResponse(response, err, "CreateApplicationRoleAssignment", resourceType)
	if err != nil {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s\nError: %v", response.Status, response.Body, err)

		return testutils_resource.ResourceInfo{}
	}
	if !ok {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s", response.Status, response.Body)

		return testutils_resource.ResourceInfo{}
	}

	return testutils_resource.ResourceInfo{
		DeletionIds: []string{
			applicationId,
			*resource.Id,
		},
		CreationInfo: map[testutils_resource.ResourceCreationInfoType]string{
			testutils_resource.ENUM_ID:   *resource.Id,
			testutils_resource.ENUM_NAME: roleName,
		},
	}
}

func deleteApplicationRoleAssignment(t *testing.T, clientInfo *connector.ClientInfo, resourceType string, ids ...string) {
	t.Helper()

	if len(ids) != 2 {
		t.Errorf("Unexpected number of arguments provided to deleteApplicationRoleAssignment(): %v", ids)

		return
	}

	request := clientInfo.PingOneApiClient.ManagementAPIClient.ApplicationRoleAssignmentsApi.DeleteApplicationRoleAssignment(clientInfo.PingOneContext, clientInfo.PingOneExportEnvironmentID, ids[0], ids[1])

	response, err := request.Execute()
	ok, err := common.HandleClientResponse(response, err, "DeleteApplicationRoleAssignment", resourceType)
	if err != nil {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s\nError: %v", response.Status, response.Body, err)

		return
	}
	if !ok {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s", response.Status, response.Body)

		return
	}
}
