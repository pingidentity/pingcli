// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package pingone_testable_resources

import (
	"testing"

	"github.com/patrickcping/pingone-go-sdk-v2/management"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone/sso/resources"
	"github.com/pingidentity/pingcli/internal/testing/testutils_resource"
)

func SignOnPolicyAction(t *testing.T, clientInfo *connector.ClientInfo) *testutils_resource.TestableResource {
	t.Helper()

	return &testutils_resource.TestableResource{
		ClientInfo: clientInfo,
		CreateFunc: createSignOnPolicyAction,
		DeleteFunc: nil, // The deletion of this resource is handled by the deletion of the SignOnPolicy resource
		Dependencies: []*testutils_resource.TestableResource{
			SignOnPolicy(t, clientInfo),
		},
		ExportableResource: resources.SignOnPolicyAction(clientInfo),
	}
}

func createSignOnPolicyAction(t *testing.T, clientInfo *connector.ClientInfo, resourceType string, strArgs ...string) testutils_resource.ResourceInfo {
	t.Helper()

	if len(strArgs) != 1 {
		t.Errorf("Unexpected number of arguments provided to createSignOnPolicyAction(): %v", strArgs)
		return testutils_resource.ResourceInfo{}
	}

	policyId := strArgs[0]

	request := clientInfo.PingOneApiClient.ManagementAPIClient.SignOnPolicyActionsApi.CreateSignOnPolicyAction(clientInfo.PingOneContext, clientInfo.PingOneExportEnvironmentID, policyId)
	clientStruct := management.SignOnPolicyAction{
		SignOnPolicyActionLogin: &management.SignOnPolicyActionLogin{
			Priority: 10,
			Type:     management.ENUMSIGNONPOLICYTYPE_LOGIN,
			Condition: &management.SignOnPolicyActionCommonConditionOrOrInner{
				SignOnPolicyActionCommonConditionNot: &management.SignOnPolicyActionCommonConditionNot{
					Not: &management.SignOnPolicyActionCommonConditionAggregate{
						SignOnPolicyActionCommonConditionIPRange: &management.SignOnPolicyActionCommonConditionIPRange{
							IpRange: []string{
								"10.1.1.1/8",
								"10.0.0.0/8",
							},
							Contains: "${flow.request.http.remoteIp}",
						},
					},
				},
			},
			Recovery: &management.SignOnPolicyActionLoginAllOfRecovery{
				Enabled: true,
			},
		},
	}

	request = request.SignOnPolicyAction(clientStruct)

	resource, response, err := request.Execute()
	ok, err := common.HandleClientResponse(response, err, "CreateSignOnPolicyAction", resourceType)
	if err != nil {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s\nError: %v", response.Status, response.Body, err)
		return testutils_resource.ResourceInfo{}
	}
	if !ok {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s", response.Status, response.Body)
		return testutils_resource.ResourceInfo{}
	}

	return testutils_resource.ResourceInfo{
		DeletionIds: []string{
			policyId,
			*resource.SignOnPolicyActionLogin.Id,
		},
		CreationInfo: map[testutils_resource.ResourceCreationInfoType]string{
			testutils_resource.ENUM_ID:   *resource.SignOnPolicyActionLogin.Id,
			testutils_resource.ENUM_TYPE: string(resource.SignOnPolicyActionLogin.Type),
		},
	}
}
