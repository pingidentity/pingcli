// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package pingone_testable_resources

import (
	"testing"

	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone/platform/resources"
	"github.com/pingidentity/pingcli/internal/testing/testutils"
	"github.com/pingidentity/pingcli/internal/testing/testutils_resource"
	"github.com/pingidentity/pingcli/internal/utils"
)

func Certificate(t *testing.T, clientInfo *connector.ClientInfo) *testutils_resource.TestableResource {
	t.Helper()

	return &testutils_resource.TestableResource{
		ClientInfo:         clientInfo,
		CreateFunc:         createCertificate,
		DeleteFunc:         deleteCertificate,
		Dependencies:       nil,
		ExportableResource: resources.Certificate(clientInfo),
	}
}

func createCertificate(t *testing.T, clientInfo *connector.ClientInfo, resourceType string, strArgs ...string) testutils_resource.ResourceCreationInfo {
	t.Helper()

	if len(strArgs) != 0 {
		t.Fatalf("Unexpected number of arguments provided to createCertificate(): %v", strArgs)
	}

	request := clientInfo.PingOneApiClient.ManagementAPIClient.CertificateManagementApi.CreateCertificateFromFile(clientInfo.PingOneContext, clientInfo.PingOneExportEnvironmentID)

	fileData, err := testutils.CreateX509Certificate()
	if err != nil {
		t.Fatalf("Failed to create X509 certificate: %v", err)
	}

	request.File(utils.Pointer([]byte(fileData)))

	resource, response, err := request.Execute()
	ok, err := common.HandleClientResponse(response, err, "CreateCertificateFromFile", resourceType)
	if err != nil {
		t.Fatalf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s\nError: %v", response.Status, response.Body, err)
	}
	if !ok {
		t.Fatalf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s", response.Status, response.Body)
	}

	return testutils_resource.ResourceCreationInfo{
		DepIds: []string{},
		SelfInfo: map[testutils_resource.ResourceCreationInfoType]string{
			testutils_resource.ENUM_ID:   *resource.Id,
			testutils_resource.ENUM_NAME: resource.Name,
		},
	}
}

func deleteCertificate(t *testing.T, clientInfo *connector.ClientInfo, resourceType string, ids ...string) {
	t.Helper()

	if len(ids) != 1 {
		t.Fatalf("Unexpected number of arguments provided to deleteCertificate(): %v", ids)
	}
	id := ids[0]

	request := clientInfo.PingOneApiClient.ManagementAPIClient.CertificateManagementApi.DeleteCertificate(clientInfo.PingOneContext, clientInfo.PingOneExportEnvironmentID, id)

	response, err := request.Execute()
	ok, err := common.HandleClientResponse(response, err, "DeleteCertificate", resourceType)
	if err != nil {
		t.Fatalf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s\nError: %v", response.Status, response.Body, err)
	}
	if !ok {
		t.Fatalf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s", response.Status, response.Body)
	}
}
