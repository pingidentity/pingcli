// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package pingone_testable_resources

import (
	"testing"

	"github.com/hashicorp/go-uuid"
	"github.com/patrickcping/pingone-go-sdk-v2/management"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone/platform/resources"
	"github.com/pingidentity/pingcli/internal/testing/testutils_resource"
	"github.com/pingidentity/pingcli/internal/utils"
)

func BrandingTheme(t *testing.T, clientInfo *connector.ClientInfo) *testutils_resource.TestableResource {
	t.Helper()

	return &testutils_resource.TestableResource{
		ClientInfo:         clientInfo,
		CreateFunc:         createBrandingTheme,
		DeleteFunc:         deleteBrandingTheme,
		Dependencies:       nil,
		ExportableResource: resources.BrandingTheme(clientInfo),
	}
}

func createBrandingTheme(t *testing.T, clientInfo *connector.ClientInfo, resourceType string, strArgs ...string) testutils_resource.ResourceInfo {
	t.Helper()

	if len(strArgs) != 0 {
		t.Errorf("Unexpected number of arguments provided to createBrandingTheme(): %v", strArgs)
		return testutils_resource.ResourceInfo{}
	}

	request := clientInfo.PingOneApiClient.ManagementAPIClient.BrandingThemesApi.CreateBrandingTheme(clientInfo.PingOneContext, clientInfo.PingOneExportEnvironmentID)

	newLogoId, err := uuid.GenerateUUID()
	if err != nil {
		t.Errorf("Failed to generate UUID: %v", err)
		return testutils_resource.ResourceInfo{}
	}

	newImageId, err := uuid.GenerateUUID()
	if err != nil {
		t.Errorf("Failed to generate UUID: %v", err)
		return testutils_resource.ResourceInfo{}
	}

	clientStruct := management.BrandingTheme{
		Template: "default",
		Configuration: management.BrandingThemeConfiguration{
			LogoType: "IMAGE",
			Logo: &management.BrandingThemeConfigurationLogo{
				Href: "https://www.pingidentity.com/content/dam/picr/nav/Ping-Logo-2.svg",
				Id:   newLogoId,
			},
			BackgroundColor: utils.Pointer("#333333"),
			BackgroundType:  "COLOR",
			BackgroundImage: &management.BrandingThemeConfigurationBackgroundImage{
				Href: "https://www.pingidentity.com/content/dam/picr/nav/Ping-Logo-2.svg",
				Id:   newImageId,
			},
			CardColor:        "#333333",
			HeadingTextColor: "#333333",
			LinkTextColor:    "#333333",
			BodyTextColor:    "#444444",
			ButtonTextColor:  "#333333",
			ButtonColor:      "#333333",
			Name:             utils.Pointer("ACME test theme"),
			Footer:           utils.Pointer("some footer"),
		},
	}

	request = request.BrandingTheme(clientStruct)

	resource, response, err := request.Execute()
	ok, err := common.HandleClientResponse(response, err, "CreateBrandingTheme", resourceType)
	if err != nil {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s\nError: %v", response.Status, response.Body, err)
		return testutils_resource.ResourceInfo{}
	}
	if !ok {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s", response.Status, response.Body)
		return testutils_resource.ResourceInfo{}
	}

	return testutils_resource.ResourceInfo{
		DeletionIds: []string{
			*resource.Id,
		},
		CreationInfo: map[testutils_resource.ResourceCreationInfoType]string{
			testutils_resource.ENUM_ID:   *resource.Id,
			testutils_resource.ENUM_NAME: *resource.Configuration.Name,
		},
	}
}

func deleteBrandingTheme(t *testing.T, clientInfo *connector.ClientInfo, resourceType string, ids ...string) {
	t.Helper()

	if len(ids) != 1 {
		t.Errorf("Unexpected number of arguments provided to deleteBrandingTheme(): %v", ids)
		return
	}

	request := clientInfo.PingOneApiClient.ManagementAPIClient.BrandingThemesApi.DeleteBrandingTheme(clientInfo.PingOneContext, clientInfo.PingOneExportEnvironmentID, ids[0])

	response, err := request.Execute()
	ok, err := common.HandleClientResponse(response, err, "DeleteBrandingTheme", resourceType)
	if err != nil {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s\nError: %v", response.Status, response.Body, err)
		return
	}
	if !ok {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s", response.Status, response.Body)
		return
	}
}
