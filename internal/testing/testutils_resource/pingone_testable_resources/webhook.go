// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package pingone_testable_resources

import (
	"testing"

	"github.com/patrickcping/pingone-go-sdk-v2/management"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone/platform/resources"
	"github.com/pingidentity/pingcli/internal/testing/testutils_resource"
)

func Webhook(t *testing.T, clientInfo *connector.ClientInfo) *testutils_resource.TestableResource {
	t.Helper()

	return &testutils_resource.TestableResource{
		ClientInfo:         clientInfo,
		CreateFunc:         createWebhook,
		DeleteFunc:         deleteWebhook,
		Dependencies:       nil,
		ExportableResource: resources.Webhook(clientInfo),
	}
}

func createWebhook(t *testing.T, clientInfo *connector.ClientInfo, resourceType string, strArgs ...string) testutils_resource.ResourceCreationInfo {
	t.Helper()

	if len(strArgs) != 0 {
		t.Fatalf("Unexpected number of arguments provided to createWebhook(): %v", strArgs)
	}

	request := clientInfo.PingOneApiClient.ManagementAPIClient.SubscriptionsWebhooksApi.CreateSubscription(clientInfo.PingOneContext, clientInfo.PingOneExportEnvironmentID)
	clientStruct := management.Subscription{
		Name: "SubscriptionName1",
		FilterOptions: management.SubscriptionFilterOptions{
			IncludedActionTypes: []string{
				"USER.CREATED",
				"USER.UPDATED",
			},
		},
		HttpEndpoint: management.SubscriptionHttpEndpoint{
			Url: "https://subscriptionendpoint.com",
			Headers: &map[string]string{
				"some-header": "some-value",
			},
		},
		Format:                management.ENUMSUBSCRIPTIONFORMAT_ACTIVITY,
		VerifyTlsCertificates: false,
		Enabled:               true,
	}

	request = request.Subscription(clientStruct)

	resource, response, err := request.Execute()
	ok, err := common.HandleClientResponse(response, err, "CreateSubscription", resourceType)
	if err != nil {
		t.Fatalf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s\nError: %v", response.Status, response.Body, err)
	}
	if !ok {
		t.Fatalf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s", response.Status, response.Body)
	}

	return testutils_resource.ResourceCreationInfo{
		DepIds: []string{},
		SelfInfo: map[testutils_resource.ResourceCreationInfoType]string{
			testutils_resource.ENUM_ID:   *resource.Id,
			testutils_resource.ENUM_NAME: resource.Name,
		},
	}
}

func deleteWebhook(t *testing.T, clientInfo *connector.ClientInfo, resourceType string, ids ...string) {
	t.Helper()

	if len(ids) != 1 {
		t.Fatalf("Unexpected number of arguments provided to deleteWebhook(): %v", ids)
	}
	id := ids[0]

	request := clientInfo.PingOneApiClient.ManagementAPIClient.SubscriptionsWebhooksApi.DeleteSubscription(clientInfo.PingOneContext, clientInfo.PingOneExportEnvironmentID, id)

	response, err := request.Execute()
	ok, err := common.HandleClientResponse(response, err, "DeleteSubscription", resourceType)
	if err != nil {
		t.Fatalf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s\nError: %v", response.Status, response.Body, err)
	}
	if !ok {
		t.Fatalf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s", response.Status, response.Body)
	}
}
