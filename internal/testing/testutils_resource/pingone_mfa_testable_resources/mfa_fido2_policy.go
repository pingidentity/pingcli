// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package pingone_mfa_testable_resources

import (
	"testing"

	"github.com/patrickcping/pingone-go-sdk-v2/mfa"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone/mfa/resources"
	"github.com/pingidentity/pingcli/internal/testing/testutils_resource"
	"github.com/pingidentity/pingcli/internal/utils"
)

func MfaFido2Policy(t *testing.T, clientInfo *connector.ClientInfo) *testutils_resource.TestableResource {
	t.Helper()

	return &testutils_resource.TestableResource{
		ClientInfo:         clientInfo,
		CreateFunc:         createMfaFido2Policy,
		DeleteFunc:         deleteMfaFido2Policy,
		Dependencies:       nil,
		ExportableResource: resources.MfaFido2Policy(clientInfo),
	}
}

func createMfaFido2Policy(t *testing.T, clientInfo *connector.ClientInfo, resourceType string, strArgs ...string) testutils_resource.ResourceInfo {
	t.Helper()

	if len(strArgs) != 0 {
		t.Errorf("Unexpected number of arguments provided to createMfaFido2Policy(): %v", strArgs)
		return testutils_resource.ResourceInfo{}
	}

	request := clientInfo.PingOneApiClient.MFAAPIClient.FIDO2PolicyApi.CreateFIDO2Policy(clientInfo.PingOneContext, clientInfo.PingOneExportEnvironmentID)
	clientStruct := mfa.FIDO2Policy{
		Name:                    "TestFido2Policy",
		Description:             utils.Pointer("Test FIDO2 Policy"),
		DeviceDisplayName:       "Fido2 device",
		DiscoverableCredentials: mfa.ENUMFIDO2POLICYDISCOVERABLECREDENTIALS_REQUIRED,
		AuthenticatorAttachment: mfa.ENUMFIDO2POLICYAUTHENTICATORATTACHMENT_BOTH,
		UserVerification: mfa.FIDO2PolicyUserVerification{
			EnforceDuringAuthentication: true,
			Option:                      mfa.ENUMFIDO2POLICYUSERVERIFICATIONOPTION_REQUIRED,
		},
		UserPresenceTimeout: &mfa.FIDO2PolicyUserPresenceTimeout{
			Duration: utils.Pointer(int32(4)),
			TimeUnit: utils.Pointer(mfa.ENUMTIMEUNIT_MINUTES),
		},
		BackupEligibility: mfa.FIDO2PolicyBackupEligibility{
			EnforceDuringAuthentication: true,
			Allow:                       true,
		},
		UserDisplayNameAttributes: mfa.FIDO2PolicyUserDisplayNameAttributes{
			Attributes: []mfa.FIDO2PolicyUserDisplayNameAttributesAttributesInner{
				{
					Name: "username",
				},
				{
					Name: "email",
				},
			},
		},
		AttestationRequirements: mfa.ENUMFIDO2POLICYATTESTATIONREQUIREMENTS_DIRECT,
		MdsAuthenticatorsRequirements: mfa.FIDO2PolicyMdsAuthenticatorsRequirements{
			AllowedAuthenticators:       nil,
			Option:                      mfa.ENUMFIDO2POLICYMDSAUTHENTICATOROPTION_CERTIFIED,
			EnforceDuringAuthentication: true,
		},
		PublicKeyCredentialHints: []mfa.EnumFIDO2PublicKeyCredentialHint{
			mfa.ENUMFIDO2PUBLICKEYCREDENTIALHINT_SECURITY_KEY,
			mfa.ENUMFIDO2PUBLICKEYCREDENTIALHINT_CLIENT_DEVICE,
			mfa.ENUMFIDO2PUBLICKEYCREDENTIALHINT_HYBRID,
		},
		RelyingPartyId: "relyingpartydomain.example.com",
		Default:        utils.Pointer(false),
	}

	request = request.FIDO2Policy(clientStruct)

	resource, response, err := request.Execute()
	ok, err := common.HandleClientResponse(response, err, "CreateFIDO2Policy", resourceType)
	if err != nil {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s\nError: %v", response.Status, response.Body, err)
		return testutils_resource.ResourceInfo{}
	}
	if !ok {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s", response.Status, response.Body)
		return testutils_resource.ResourceInfo{}
	}

	return testutils_resource.ResourceInfo{
		DeletionIds: []string{
			*resource.Id,
		},
		CreationInfo: map[testutils_resource.ResourceCreationInfoType]string{
			testutils_resource.ENUM_ID:   *resource.Id,
			testutils_resource.ENUM_NAME: resource.Name,
		},
	}
}

func deleteMfaFido2Policy(t *testing.T, clientInfo *connector.ClientInfo, resourceType string, ids ...string) {
	t.Helper()

	if len(ids) != 1 {
		t.Errorf("Unexpected number of arguments provided to deleteMfaFido2Policy(): %v", ids)
		return
	}

	request := clientInfo.PingOneApiClient.MFAAPIClient.FIDO2PolicyApi.DeleteFIDO2Policy(clientInfo.PingOneContext, clientInfo.PingOneExportEnvironmentID, ids[0])

	response, err := request.Execute()
	ok, err := common.HandleClientResponse(response, err, "DeleteFIDO2Policy", resourceType)
	if err != nil {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s\nError: %v", response.Status, response.Body, err)
		return
	}
	if !ok {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s", response.Status, response.Body)
		return
	}
}
