// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package pingone_mfa_testable_resources

import (
	"testing"

	"github.com/patrickcping/pingone-go-sdk-v2/mfa"
	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingone/mfa/resources"
	"github.com/pingidentity/pingcli/internal/testing/testutils_resource"
	"github.com/pingidentity/pingcli/internal/utils"
)

func MfaDevicePolicy(t *testing.T, clientInfo *connector.ClientInfo) *testutils_resource.TestableResource {
	t.Helper()

	return &testutils_resource.TestableResource{
		ClientInfo:         clientInfo,
		CreateFunc:         createMfaDevicePolicy,
		DeleteFunc:         deleteMfaDevicePolicy,
		Dependencies:       nil,
		ExportableResource: resources.MfaDevicePolicy(clientInfo),
	}
}

func createMfaDevicePolicy(t *testing.T, clientInfo *connector.ClientInfo, resourceType string, strArgs ...string) testutils_resource.ResourceInfo {
	t.Helper()

	if len(strArgs) != 0 {
		t.Errorf("Unexpected number of arguments provided to createMfaDevicePolicy(): %v", strArgs)

		return testutils_resource.ResourceInfo{}
	}

	request := clientInfo.PingOneApiClient.MFAAPIClient.DeviceAuthenticationPolicyApi.CreateDeviceAuthenticationPolicies(clientInfo.PingOneContext, clientInfo.PingOneExportEnvironmentID)
	clientStruct := mfa.DeviceAuthenticationPolicyPost{
		DeviceAuthenticationPolicy: &mfa.DeviceAuthenticationPolicy{
			Name: "TestDeviceAuthPolicy",
			Sms: mfa.DeviceAuthenticationPolicyOfflineDevice{
				Enabled: true,
				Otp: mfa.DeviceAuthenticationPolicyOfflineDeviceOtp{
					Failure: mfa.DeviceAuthenticationPolicyOfflineDeviceOtpFailure{
						Count: 3,
						CoolDown: mfa.DeviceAuthenticationPolicyOfflineDeviceOtpFailureCoolDown{
							Duration: 0,
							TimeUnit: mfa.ENUMTIMEUNIT_MINUTES,
						},
					},
					LifeTime: mfa.DeviceAuthenticationPolicyOfflineDeviceOtpLifeTime{
						Duration: 30,
						TimeUnit: mfa.ENUMTIMEUNIT_MINUTES,
					},
					OtpLength: utils.Pointer(int32(6)),
				},
			},
			Email: mfa.DeviceAuthenticationPolicyOfflineDevice{
				Enabled: true,
				Otp: mfa.DeviceAuthenticationPolicyOfflineDeviceOtp{
					Failure: mfa.DeviceAuthenticationPolicyOfflineDeviceOtpFailure{
						Count: 3,
						CoolDown: mfa.DeviceAuthenticationPolicyOfflineDeviceOtpFailureCoolDown{
							Duration: 0,
							TimeUnit: mfa.ENUMTIMEUNIT_MINUTES,
						},
					},
					LifeTime: mfa.DeviceAuthenticationPolicyOfflineDeviceOtpLifeTime{
						Duration: 30,
						TimeUnit: mfa.ENUMTIMEUNIT_MINUTES,
					},
					OtpLength: utils.Pointer(int32(8)),
				},
			},
			Mobile: mfa.DeviceAuthenticationPolicyMobile{
				Enabled: true,
				Otp: mfa.DeviceAuthenticationPolicyMobileOtp{
					Failure: mfa.DeviceAuthenticationPolicyOfflineDeviceOtpFailure{
						Count: 3,
						CoolDown: mfa.DeviceAuthenticationPolicyOfflineDeviceOtpFailureCoolDown{
							Duration: 2,
							TimeUnit: mfa.ENUMTIMEUNIT_MINUTES,
						},
					},
				},
				Applications: []mfa.DeviceAuthenticationPolicyMobileApplicationsInner{},
			},
			Totp: mfa.DeviceAuthenticationPolicyTotp{
				Enabled: true,
				Otp: mfa.DeviceAuthenticationPolicyTotpOtp{
					Failure: mfa.DeviceAuthenticationPolicyOfflineDeviceOtpFailure{
						Count: 3,
						CoolDown: mfa.DeviceAuthenticationPolicyOfflineDeviceOtpFailureCoolDown{
							Duration: 2,
							TimeUnit: mfa.ENUMTIMEUNIT_MINUTES,
						},
					},
				},
			},
			Voice: mfa.DeviceAuthenticationPolicyOfflineDevice{
				Enabled: true,
				Otp: mfa.DeviceAuthenticationPolicyOfflineDeviceOtp{
					Failure: mfa.DeviceAuthenticationPolicyOfflineDeviceOtpFailure{
						Count: 3,
						CoolDown: mfa.DeviceAuthenticationPolicyOfflineDeviceOtpFailureCoolDown{
							Duration: 0,
							TimeUnit: mfa.ENUMTIMEUNIT_MINUTES,
						},
					},
					LifeTime: mfa.DeviceAuthenticationPolicyOfflineDeviceOtpLifeTime{
						Duration: 30,
						TimeUnit: mfa.ENUMTIMEUNIT_MINUTES,
					},
					OtpLength: utils.Pointer(int32(6)),
				},
			},
			NewDeviceNotification: utils.Pointer(mfa.ENUMMFADEVICEPOLICYNEWDEVICENOTIFICATION_SMS_THEN_EMAIL),
			ForSignOnPolicy:       false,
			Default:               false,
		},
	}

	request = request.DeviceAuthenticationPolicyPost(clientStruct)

	resource, response, err := request.Execute()
	ok, err := common.HandleClientResponse(response, err, "CreateDeviceAuthenticationPolicies", resourceType)
	if err != nil {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s\nError: %v", response.Status, response.Body, err)

		return testutils_resource.ResourceInfo{}
	}
	if !ok {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s", response.Status, response.Body)

		return testutils_resource.ResourceInfo{}
	}

	return testutils_resource.ResourceInfo{
		DeletionIds: []string{
			*resource.DeviceAuthenticationPolicy.Id,
		},
		CreationInfo: map[testutils_resource.ResourceCreationInfoType]string{
			testutils_resource.ENUM_ID:   *resource.DeviceAuthenticationPolicy.Id,
			testutils_resource.ENUM_NAME: resource.DeviceAuthenticationPolicy.Name,
		},
	}
}

func deleteMfaDevicePolicy(t *testing.T, clientInfo *connector.ClientInfo, resourceType string, ids ...string) {
	t.Helper()

	if len(ids) != 1 {
		t.Errorf("Unexpected number of arguments provided to deleteMfaDevicePolicy(): %v", ids)

		return
	}

	request := clientInfo.PingOneApiClient.MFAAPIClient.DeviceAuthenticationPolicyApi.DeleteDeviceAuthenticationPolicy(clientInfo.PingOneContext, clientInfo.PingOneExportEnvironmentID, ids[0])

	response, err := request.Execute()
	ok, err := common.HandleClientResponse(response, err, "DeleteDeviceAuthenticationPolicy", resourceType)
	if err != nil {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s\nError: %v", response.Status, response.Body, err)

		return
	}
	if !ok {
		t.Errorf("Failed to execute PingOne client function\nResponse Status: %s\nResponse Body: %s", response.Status, response.Body)

		return
	}
}
