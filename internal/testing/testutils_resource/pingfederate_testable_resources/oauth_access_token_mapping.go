// Copyright Â© 2025 Ping Identity Corporation
// Code generated by ping-cli-generator

package pingfederate_testable_resources

import (
	"testing"

	"github.com/pingidentity/pingcli/internal/connector"
	"github.com/pingidentity/pingcli/internal/connector/common"
	"github.com/pingidentity/pingcli/internal/connector/pingfederate/resources"
	"github.com/pingidentity/pingcli/internal/testing/testutils_resource"
	"github.com/pingidentity/pingcli/internal/utils"
	client "github.com/pingidentity/pingfederate-go-client/v1220/configurationapi"
)

func OauthAccessTokenMapping(t *testing.T, clientInfo *connector.ClientInfo) *testutils_resource.TestableResource {
	t.Helper()

	return &testutils_resource.TestableResource{
		ClientInfo: clientInfo,
		CreateFunc: createOauthAccessTokenMapping,
		DeleteFunc: deleteOauthAccessTokenMapping,
		Dependencies: []*testutils_resource.TestableResource{
			OauthAccessTokenManager(t, clientInfo),
		},
		ExportableResource: resources.OauthAccessTokenMapping(clientInfo),
	}
}

func createOauthAccessTokenMapping(t *testing.T, clientInfo *connector.ClientInfo, resourceType string, strArgs ...string) testutils_resource.ResourceInfo {
	t.Helper()

	if len(strArgs) != 1 {
		t.Fatalf("Unexpected number of arguments provided to createOauthAccessTokenMapping(): %v", strArgs)
	}
	testTokenManagerId := strArgs[0]

	request := clientInfo.PingFederateApiClient.OauthAccessTokenMappingsAPI.CreateMapping(clientInfo.PingFederateContext)
	clientStruct := client.AccessTokenMapping{
		AccessTokenManagerRef: client.ResourceLink{
			Id: testTokenManagerId,
		},
		AttributeContractFulfillment: map[string]client.AttributeFulfillmentValue{
			"testAttribute": {
				Source: client.SourceTypeIdKey{
					Type: "NO_MAPPING",
				},
			},
		},
		Context: client.AccessTokenMappingContext{
			Type: "DEFAULT",
		},
		Id: utils.Pointer("default|" + testTokenManagerId),
	}

	request = request.Body(clientStruct)

	resource, response, err := request.Execute()
	ok, err := common.HandleClientResponse(response, err, "CreateMapping", resourceType)
	if err != nil {
		t.Fatalf("Failed to execute client function\nResponse Status: %s\nResponse Body: %s\nError: %v", response.Status, response.Body, err)
	}
	if !ok {
		t.Fatalf("Failed to execute client function\nResponse Status: %s\nResponse Body: %s", response.Status, response.Body)
	}

	return testutils_resource.ResourceInfo{
		DeletionIds: []string{},
		CreationInfo: map[testutils_resource.ResourceCreationInfoType]string{
			testutils_resource.ENUM_ID:           *resource.Id,
			testutils_resource.ENUM_CONTEXT_TYPE: resource.Context.Type,
		},
	}
}

func deleteOauthAccessTokenMapping(t *testing.T, clientInfo *connector.ClientInfo, resourceType string, ids ...string) {
	t.Helper()

	if len(ids) != 1 {
		t.Fatalf("Unexpected number of arguments provided to deleteOauthAccessTokenMapping(): %v", ids)
	}
	id := ids[0]

	request := clientInfo.PingFederateApiClient.OauthAccessTokenMappingsAPI.DeleteMapping(clientInfo.PingFederateContext, id)

	response, err := request.Execute()
	ok, err := common.HandleClientResponse(response, err, "DeleteMapping", resourceType)
	if err != nil {
		t.Fatalf("Failed to execute client function\nResponse Status: %s\nResponse Body: %s\nError: %v", response.Status, response.Body, err)
	}
	if !ok {
		t.Fatalf("Failed to execute client function\nResponse Status: %s\nResponse Body: %s", response.Status, response.Body)
	}
}
